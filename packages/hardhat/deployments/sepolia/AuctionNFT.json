{
  "address": "0x39a693aeD7Ee5F7cc965c49a25F354B5F7Be397A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "NFTAuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctionContract",
          "type": "address"
        }
      ],
      "name": "NFTAuctioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreatedNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionContract",
          "type": "address"
        }
      ],
      "name": "markAsAuctioned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMinPrice",
          "type": "uint256"
        }
      ],
      "name": "markAsAuctionedWithPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "markAsNotAuctioned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "mintAuctionNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "mintNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuctioned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "auctionContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        }
      ],
      "name": "setFactoryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32b506beb5f61a7fddbf94811347327094b829a6f17669ecb39fe2f87dd40a31",
  "receipt": {
    "to": null,
    "from": "0x906CBCA3B02fd5BF783206883565c73A9Fc78e57",
    "contractAddress": "0x39a693aeD7Ee5F7cc965c49a25F354B5F7Be397A",
    "transactionIndex": 156,
    "gasUsed": "2223978",
    "logsBloom": "0x
    "blockHash": "0x6a8c2130878455aac9ece9b43649d80e42b62e942f029c842a61265222118d25",
    "transactionHash": "0x32b506beb5f61a7fddbf94811347327094b829a6f17669ecb39fe2f87dd40a31",
    "logs": [
      {
        "transactionIndex": 156,
        "blockNumber": 8659929,
        "transactionHash": "0x32b506beb5f61a7fddbf94811347327094b829a6f17669ecb39fe2f87dd40a31",
        "address": "0x39a693aeD7Ee5F7cc965c49a25F354B5F7Be397A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000906cbca3b02fd5bf783206883565c73a9fc78e57"
        ],
        "data": "0x",
        "logIndex": 254,
        "blockHash": "0x6a8c2130878455aac9ece9b43649d80e42b62e942f029c842a61265222118d25"
      }
    ],
    "blockNumber": 8659929,
    "cumulativeGasUsed": "16184431",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "24d6194a5475c9db93ccec9ed43d6a61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"NFTAuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"}],\"name\":\"NFTAuctioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatedNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"}],\"name\":\"markAsAuctioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMinPrice\",\"type\":\"uint256\"}],\"name\":\"markAsAuctionedWithPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"markAsNotAuctioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"mintAuctionNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuctioned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"}],\"name\":\"setFactoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCreatedNFTs(address)\":{\"params\":{\"creator\":\"\\u521b\\u5efa\\u8005\\u5730\\u5740\"},\"returns\":{\"_0\":\"tokenIds NFT ID\\u6570\\u7ec4\"}},\"getUserNFTs(address)\":{\"params\":{\"user\":\"\\u7528\\u6237\\u5730\\u5740\"},\"returns\":{\"_0\":\"tokenIds NFT ID\\u6570\\u7ec4\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"markAsAuctioned(uint256,address)\":{\"params\":{\"auctionContract\":\"\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\",\"tokenId\":\"NFT ID\"}},\"markAsAuctionedWithPrice(uint256,address,uint256)\":{\"params\":{\"auctionContract\":\"\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\",\"newMinPrice\":\"\\u65b0\\u7684\\u6700\\u4f4e\\u4ef7\\u683c\",\"tokenId\":\"NFT ID\"}},\"markAsNotAuctioned(uint256,address)\":{\"params\":{\"tokenId\":\"NFT ID\",\"winner\":\"\\u62cd\\u5356\\u83b7\\u80dc\\u8005\\u5730\\u5740\"}},\"mintAuctionNFT(address,string,string,string,uint256,string)\":{\"params\":{\"description\":\"\\u7269\\u54c1\\u63cf\\u8ff0\",\"imageHash\":\"IPFS\\u56fe\\u7247\\u54c8\\u5e0c\",\"metadataURI\":\"NFT\\u5143\\u6570\\u636eURI\",\"minPrice\":\"\\u6700\\u4f4e\\u51fa\\u4ef7\",\"name\":\"\\u7269\\u54c1\\u540d\\u79f0\",\"to\":\"NFT\\u63a5\\u6536\\u8005\"},\"returns\":{\"_0\":\"tokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\"}},\"mintNFT(string,string,string,uint256,string)\":{\"params\":{\"description\":\"\\u7269\\u54c1\\u63cf\\u8ff0\",\"imageHash\":\"IPFS\\u56fe\\u7247\\u54c8\\u5e0c\",\"metadataURI\":\"NFT\\u5143\\u6570\\u636eURI\",\"minPrice\":\"\\u6700\\u4f4e\\u51fa\\u4ef7\",\"name\":\"\\u7269\\u54c1\\u540d\\u79f0\"},\"returns\":{\"_0\":\"tokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setFactoryContract(address)\":{\"params\":{\"_factoryContract\":\"\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"\\u603b\\u6570\\u91cf\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"\\u62cd\\u5356NFT\\u5408\\u7ea6\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCreatedNFTs(address)\":{\"notice\":\"\\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709NFT\"},\"getUserNFTs(address)\":{\"notice\":\"\\u83b7\\u53d6\\u7528\\u6237\\u62e5\\u6709\\u7684\\u6240\\u6709NFT\"},\"markAsAuctioned(uint256,address)\":{\"notice\":\"\\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\"},\"markAsAuctionedWithPrice(uint256,address,uint256)\":{\"notice\":\"\\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\u5e76\\u66f4\\u65b0\\u6700\\u4f4e\\u4ef7\\u683c\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\"},\"markAsNotAuctioned(uint256,address)\":{\"notice\":\"\\u6807\\u8bb0NFT\\u62cd\\u5356\\u5df2\\u7ed3\\u675f\\uff0c\\u6062\\u590d\\u4e3a\\u53ef\\u51fa\\u552e\\u72b6\\u6001\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\"},\"mintAuctionNFT(address,string,string,string,uint256,string)\":{\"notice\":\"\\u94f8\\u9020NFT\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\"},\"mintNFT(string,string,string,uint256,string)\":{\"notice\":\"\\u516c\\u5f00\\u7684NFT\\u94f8\\u9020\\u51fd\\u6570\\uff08\\u7528\\u6237\\u53ef\\u76f4\\u63a5\\u8c03\\u7528\\uff09\"},\"setFactoryContract(address)\":{\"notice\":\"\\u8bbe\\u7f6e\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\"},\"totalSupply()\":{\"notice\":\"\\u83b7\\u53d6\\u603bNFT\\u6570\\u91cf\"}},\"notice\":\"\\u7ba1\\u7406\\u62cd\\u5356\\u7269\\u54c1\\u7684NFT\\u5316\\uff0c\\u6bcf\\u4e2a\\u62cd\\u5356\\u7269\\u54c1\\u90fd\\u662f\\u552f\\u4e00\\u7684NFT\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionNFT.sol\":\"AuctionNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AuctionNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n/// @title \\u62cd\\u5356NFT\\u5408\\u7ea6\\r\\n/// @notice \\u7ba1\\u7406\\u62cd\\u5356\\u7269\\u54c1\\u7684NFT\\u5316\\uff0c\\u6bcf\\u4e2a\\u62cd\\u5356\\u7269\\u54c1\\u90fd\\u662f\\u552f\\u4e00\\u7684NFT\\r\\ncontract AuctionNFT is ERC721, ERC721URIStorage, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // NFT\\u8ba1\\u6570\\u5668\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n    \\r\\n    // NFT\\u5143\\u6570\\u636e\\u7ed3\\u6784\\r\\n    struct NFTMetadata {\\r\\n        string name;           // \\u7269\\u54c1\\u540d\\u79f0\\r\\n        string description;    // \\u7269\\u54c1\\u63cf\\u8ff0\\r\\n        string imageHash;      // IPFS\\u56fe\\u7247\\u54c8\\u5e0c\\r\\n        uint256 minPrice;      // \\u6700\\u4f4e\\u51fa\\u4ef7\\r\\n        address creator;       // \\u521b\\u5efa\\u8005\\r\\n        bool isAuctioned;      // \\u662f\\u5426\\u5df2\\u62cd\\u5356\\r\\n        address auctionContract; // \\u5173\\u8054\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\r\\n        uint256 createTime;    // \\u521b\\u5efa\\u65f6\\u95f4\\r\\n    }\\r\\n    \\r\\n    // NFT\\u5143\\u6570\\u636e\\u6620\\u5c04\\r\\n    mapping(uint256 => NFTMetadata) public nftMetadata;\\r\\n    \\r\\n    // \\u521b\\u5efa\\u8005\\u7684NFT\\u5217\\u8868\\r\\n    mapping(address => uint256[]) public creatorNFTs;\\r\\n    \\r\\n    // \\u62cd\\u5356\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\uff08\\u53ea\\u6709\\u5de5\\u5382\\u5408\\u7ea6\\u53ef\\u4ee5\\u94f8\\u9020NFT\\uff09\\r\\n    address public factoryContract;\\r\\n    \\r\\n    // \\u4e8b\\u4ef6\\r\\n    event NFTMinted(uint256 indexed tokenId, address indexed creator, string name);\\r\\n    event NFTAuctioned(uint256 indexed tokenId, address indexed auctionContract);\\r\\n    event NFTAuctionEnded(uint256 indexed tokenId, address indexed winner);\\r\\n    \\r\\n    constructor() ERC721(\\\"AuctionNFT\\\", \\\"ANFT\\\") {}\\r\\n    \\r\\n    /// @notice \\u8bbe\\u7f6e\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\r\\n    /// @param _factoryContract \\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function setFactoryContract(address _factoryContract) external onlyOwner {\\r\\n        factoryContract = _factoryContract;\\r\\n    }\\r\\n    \\r\\n    modifier onlyFactory() {\\r\\n        require(msg.sender == factoryContract, \\\"Only factory can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u516c\\u5f00\\u7684NFT\\u94f8\\u9020\\u51fd\\u6570\\uff08\\u7528\\u6237\\u53ef\\u76f4\\u63a5\\u8c03\\u7528\\uff09\\r\\n    /// @param name \\u7269\\u54c1\\u540d\\u79f0\\r\\n    /// @param description \\u7269\\u54c1\\u63cf\\u8ff0\\r\\n    /// @param imageHash IPFS\\u56fe\\u7247\\u54c8\\u5e0c\\r\\n    /// @param minPrice \\u6700\\u4f4e\\u51fa\\u4ef7\\r\\n    /// @param metadataURI NFT\\u5143\\u6570\\u636eURI\\r\\n    /// @return tokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\\r\\n    function mintNFT(\\r\\n        string memory name,\\r\\n        string memory description, \\r\\n        string memory imageHash,\\r\\n        uint256 minPrice,\\r\\n        string memory metadataURI\\r\\n    ) external returns (uint256) {\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        \\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _setTokenURI(tokenId, metadataURI);\\r\\n        \\r\\n        // \\u8bbe\\u7f6eNFT\\u5143\\u6570\\u636e\\r\\n        nftMetadata[tokenId] = NFTMetadata({\\r\\n            name: name,\\r\\n            description: description,\\r\\n            imageHash: imageHash,\\r\\n            minPrice: minPrice,\\r\\n            creator: msg.sender,\\r\\n            isAuctioned: false,\\r\\n            auctionContract: address(0),\\r\\n            createTime: block.timestamp\\r\\n        });\\r\\n        \\r\\n        // \\u6dfb\\u52a0\\u5230\\u521b\\u5efa\\u8005\\u5217\\u8868\\r\\n        creatorNFTs[msg.sender].push(tokenId);\\r\\n        \\r\\n        emit NFTMinted(tokenId, msg.sender, name);\\r\\n        \\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u94f8\\u9020NFT\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param to NFT\\u63a5\\u6536\\u8005\\r\\n    /// @param name \\u7269\\u54c1\\u540d\\u79f0\\r\\n    /// @param description \\u7269\\u54c1\\u63cf\\u8ff0\\r\\n    /// @param imageHash IPFS\\u56fe\\u7247\\u54c8\\u5e0c\\r\\n    /// @param minPrice \\u6700\\u4f4e\\u51fa\\u4ef7\\r\\n    /// @param metadataURI NFT\\u5143\\u6570\\u636eURI\\r\\n    /// @return tokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\\r\\n    function mintAuctionNFT(\\r\\n        address to,\\r\\n        string memory name,\\r\\n        string memory description, \\r\\n        string memory imageHash,\\r\\n        uint256 minPrice,\\r\\n        string memory metadataURI\\r\\n    ) external onlyFactory returns (uint256) {\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        \\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, metadataURI);\\r\\n        \\r\\n        // \\u8bbe\\u7f6eNFT\\u5143\\u6570\\u636e\\r\\n        nftMetadata[tokenId] = NFTMetadata({\\r\\n            name: name,\\r\\n            description: description,\\r\\n            imageHash: imageHash,\\r\\n            minPrice: minPrice,\\r\\n            creator: to,\\r\\n            isAuctioned: false,\\r\\n            auctionContract: address(0),\\r\\n            createTime: block.timestamp\\r\\n        });\\r\\n        \\r\\n        // \\u6dfb\\u52a0\\u5230\\u521b\\u5efa\\u8005\\u5217\\u8868\\r\\n        creatorNFTs[to].push(tokenId);\\r\\n        \\r\\n        emit NFTMinted(tokenId, to, name);\\r\\n        \\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param tokenId NFT ID\\r\\n    /// @param auctionContract \\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function markAsAuctioned(uint256 tokenId, address auctionContract) external onlyFactory {\\r\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\r\\n        nftMetadata[tokenId].isAuctioned = true;\\r\\n        nftMetadata[tokenId].auctionContract = auctionContract;\\r\\n        \\r\\n        emit NFTAuctioned(tokenId, auctionContract);\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\u5e76\\u66f4\\u65b0\\u6700\\u4f4e\\u4ef7\\u683c\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param tokenId NFT ID\\r\\n    /// @param auctionContract \\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\r\\n    /// @param newMinPrice \\u65b0\\u7684\\u6700\\u4f4e\\u4ef7\\u683c\\r\\n    function markAsAuctionedWithPrice(uint256 tokenId, address auctionContract, uint256 newMinPrice) external onlyFactory {\\r\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\r\\n        nftMetadata[tokenId].isAuctioned = true;\\r\\n        nftMetadata[tokenId].auctionContract = auctionContract;\\r\\n        nftMetadata[tokenId].minPrice = newMinPrice;\\r\\n        \\r\\n        emit NFTAuctioned(tokenId, auctionContract);\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u6807\\u8bb0NFT\\u62cd\\u5356\\u5df2\\u7ed3\\u675f\\uff0c\\u6062\\u590d\\u4e3a\\u53ef\\u51fa\\u552e\\u72b6\\u6001\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param tokenId NFT ID\\r\\n    /// @param winner \\u62cd\\u5356\\u83b7\\u80dc\\u8005\\u5730\\u5740\\r\\n    function markAsNotAuctioned(uint256 tokenId, address winner) external onlyFactory {\\r\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\r\\n        nftMetadata[tokenId].isAuctioned = false;\\r\\n        nftMetadata[tokenId].auctionContract = address(0);\\r\\n        \\r\\n        emit NFTAuctionEnded(tokenId, winner);\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u83b7\\u53d6\\u7528\\u6237\\u62e5\\u6709\\u7684\\u6240\\u6709NFT\\r\\n    /// @param user \\u7528\\u6237\\u5730\\u5740\\r\\n    /// @return tokenIds NFT ID\\u6570\\u7ec4\\r\\n    function getUserNFTs(address user) external view returns (uint256[] memory) {\\r\\n        uint256 balance = balanceOf(user);\\r\\n        uint256[] memory tokenIds = new uint256[](balance);\\r\\n        uint256 index = 0;\\r\\n        \\r\\n        for (uint256 i = 1; i <= _tokenIdCounter.current(); i++) {\\r\\n            if (_exists(i) && ownerOf(i) == user) {\\r\\n                tokenIds[index] = i;\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return tokenIds;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709NFT\\r\\n    /// @param creator \\u521b\\u5efa\\u8005\\u5730\\u5740\\r\\n    /// @return tokenIds NFT ID\\u6570\\u7ec4\\r\\n    function getCreatedNFTs(address creator) external view returns (uint256[] memory) {\\r\\n        return creatorNFTs[creator];\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u83b7\\u53d6\\u603bNFT\\u6570\\u91cf\\r\\n    /// @return \\u603b\\u6570\\u91cf\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n    \\r\\n    // \\u91cd\\u5199\\u5fc5\\u8981\\u7684\\u51fd\\u6570\\r\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n} \",\"keccak256\":\"0xb27fcce1cdd987262a50fd07e047dde9b1e76a5a51a01199fa6e0cdf573e131b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600a815269105d58dd1a5bdb93919560b21b6020808301918252835180850190945260048452631053919560e21b9084015281519192916200006091600091620000ef565b50805162000076906001906020840190620000ef565b505050620000936200008d6200009960201b60201c565b6200009d565b620001d2565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000fd9062000195565b90600052602060002090601f0160209004810192826200012157600085556200016c565b82601f106200013c57805160ff19168380011785556200016c565b828001600101855582156200016c579182015b828111156200016c5782518255916020019190600101906200014f565b506200017a9291506200017e565b5090565b5b808211156200017a57600081556001016200017f565b600181811c90821680620001aa57607f821691505b60208210811415620001cc57634e487b7160e01b600052602260045260246000fd5b50919050565b6125e280620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637d47a197116100f9578063b88d4fde11610097578063d424134111610071578063d4241341146103ce578063de11c94a146103e1578063e985e9c5146103f4578063f2fde38b1461043057600080fd5b8063b88d4fde14610395578063c2553f45146103a8578063c87b56dd146103bb57600080fd5b80639b2c2bba116100d35780639b2c2bba146103495780639cb003221461035c578063a223f7ef1461036f578063a22cb4651461038257600080fd5b80637d47a1971461031d5780638da5cb5b1461033057806395d89b411461034157600080fd5b806342842e0e1161016657806352de4ee51161014057806352de4ee5146102dc5780636352211e146102ef57806370a0823114610302578063715018a61461031557600080fd5b806342842e0e1461028f57806349541015146102a25780634fe83556146102c957600080fd5b8063081812fc116101a2578063081812fc14610226578063095ea7b31461025157806318160ddd1461026657806323b872dd1461027c57600080fd5b806301ffc9a7146101c957806306fdde03146101f157806307f2dd3114610206575b600080fd5b6101dc6101d736600461209f565b610443565b60405190151581526020015b60405180910390f35b6101f9610495565b6040516101e891906122cd565b610219610214366004611e6d565b610527565b6040516101e89190612289565b610239610234366004612190565b610593565b6040516001600160a01b0390911681526020016101e8565b61026461025f366004612075565b6105ba565b005b61026e6106d5565b6040519081526020016101e8565b61026461028a366004611ebb565b6106e5565b61026461029d366004611ebb565b610716565b6102b56102b0366004612190565b610731565b6040516101e89897969594939291906122e0565b61026e6102d73660046120d9565b61091f565b6102196102ea366004611e6d565b610ab4565b6102396102fd366004612190565b610b93565b61026e610310366004611e6d565b610bf3565b610264610c79565b61026461032b3660046121a9565b610c8d565b6007546001600160a01b0316610239565b6101f9610d41565b6102646103573660046121a9565b610d50565b61026461036a3660046121cc565b610e11565b61026e61037d366004611faf565b610edc565b610264610390366004611f73565b6110a9565b6102646103a3366004611ef7565b6110b8565b61026e6103b6366004612075565b6110f0565b6101f96103c9366004612190565b611121565b6102646103dc366004611e6d565b61112c565b600b54610239906001600160a01b031681565b6101dc610402366004611e88565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026461043e366004611e6d565b611156565b60006001600160e01b031982166380ac58cd60e01b148061047457506001600160e01b03198216635b5e139f60e01b145b8061048f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104a4906124fe565b80601f01602080910402602001604051908101604052809291908181526020018280546104d0906124fe565b801561051d5780601f106104f25761010080835404028352916020019161051d565b820191906000526020600020905b81548152906001019060200180831161050057829003601f168201915b5050505050905090565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561058757602002820191906000526020600020905b815481526020019060010190808311610573575b50505050509050919050565b600061059e826111cf565b506000908152600460205260409020546001600160a01b031690565b60006105c582610b93565b9050806001600160a01b0316836001600160a01b031614156106385760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061065457506106548133610402565b6106c65760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161062f565b6106d0838361121f565b505050565b60006106e060085490565b905090565b6106ef338261128d565b61070b5760405162461bcd60e51b815260040161062f90612350565b6106d083838361130c565b6106d0838383604051806020016040528060008152506110b8565b60096020526000908152604090208054819061074c906124fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610778906124fe565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b5050505050908060010180546107da906124fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610806906124fe565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b505050505090806002018054610868906124fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610894906124fe565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b50505050600383015460048401546005850154600690950154939491936001600160a01b038083169450600160a01b90920460ff1692919091169088565b600061092f600880546001019055565b600061093a60085490565b9050610946338261147d565b6109508184611497565b6040805161010081018252888152602080820189905281830188905260608201879052336080830152600060a0830181905260c083018190524260e0840152848152600982529290922081518051929391926109af9284920190611d22565b5060208281015180516109c89260018501920190611d22565b50604082015180516109e4916002840191602090910190611d22565b5060608201516003820155608082015160048201805460a08501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560c0830151600583018054919092166001600160a01b03199190911617905560e090910151600690910155336000818152600a60209081526040808320805460018101825590845291909220018390555182907f06becd955c918828f6e985541acbf49cc842c9e9bd569fffc7698e721ef1357590610aa2908b906122cd565b60405180910390a39695505050505050565b60606000610ac183610bf3565b905060008167ffffffffffffffff811115610ade57610ade612580565b604051908082528060200260200182016040528015610b07578160200160208202803683370190505b509050600060015b6008548111610b8957610b2181611522565b8015610b465750856001600160a01b0316610b3b82610b93565b6001600160a01b0316145b15610b775780838381518110610b5e57610b5e61256a565b602090810291909101015281610b7381612539565b9250505b80610b8181612539565b915050610b0f565b5090949350505050565b6000818152600260205260408120546001600160a01b03168061048f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161062f565b60006001600160a01b038216610c5d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161062f565b506001600160a01b031660009081526003602052604090205490565b610c8161153f565b610c8b6000611599565b565b600b546001600160a01b03163314610cb75760405162461bcd60e51b815260040161062f90612460565b610cc082611522565b610cdc5760405162461bcd60e51b815260040161062f90612434565b60008281526009602052604080822060048101805460ff60a01b1916905560050180546001600160a01b0319169055516001600160a01b0383169184917fc60768ab441b1506842432a17e68a1b1058e73dca3d3cefce45ebfbd29e491649190a35050565b6060600180546104a4906124fe565b600b546001600160a01b03163314610d7a5760405162461bcd60e51b815260040161062f90612460565b610d8382611522565b610d9f5760405162461bcd60e51b815260040161062f90612434565b60008281526009602052604080822060048101805460ff60a01b1916600160a01b17905560050180546001600160a01b0385166001600160a01b031990911681179091559051909184917ffc527a684d417f2df00b0d726bf64fbe530fbf7218671ffc83f9c23d0870cf059190a35050565b600b546001600160a01b03163314610e3b5760405162461bcd60e51b815260040161062f90612460565b610e4483611522565b610e605760405162461bcd60e51b815260040161062f90612434565b60008381526009602052604080822060048101805460ff60a01b1916600160a01b1790556005810180546001600160a01b0387166001600160a01b0319909116811790915560039091018490559051909185917ffc527a684d417f2df00b0d726bf64fbe530fbf7218671ffc83f9c23d0870cf059190a3505050565b600b546000906001600160a01b03163314610f095760405162461bcd60e51b815260040161062f90612460565b610f17600880546001019055565b6000610f2260085490565b9050610f2e888261147d565b610f388184611497565b60408051610100810182528881526020808201899052818301889052606082018790526001600160a01b038b166080830152600060a0830181905260c083018190524260e084015284815260098252929092208151805192939192610fa09284920190611d22565b506020828101518051610fb99260018501920190611d22565b5060408201518051610fd5916002840191602090910190611d22565b5060608201516003820155608082015160048201805460a08501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560c08301516005830180549183166001600160a01b03199290921691909117905560e09092015160069091015588166000818152600a60209081526040808320805460018101825590845291909220018390555182907f06becd955c918828f6e985541acbf49cc842c9e9bd569fffc7698e721ef1357590611096908b906122cd565b60405180910390a3979650505050505050565b6110b43383836115eb565b5050565b6110c2338361128d565b6110de5760405162461bcd60e51b815260040161062f90612350565b6110ea848484846116ba565b50505050565b600a602052816000526040600020818154811061110c57600080fd5b90600052602060002001600091509150505481565b606061048f826116ed565b61113461153f565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b61115e61153f565b6001600160a01b0381166111c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062f565b6111cc81611599565b50565b6111d881611522565b6111cc5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161062f565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061125482610b93565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061129983610b93565b9050806001600160a01b0316846001600160a01b031614806112e057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113045750836001600160a01b03166112f984610593565b6001600160a01b0316145b949350505050565b826001600160a01b031661131f82610b93565b6001600160a01b0316146113455760405162461bcd60e51b815260040161062f906123ef565b6001600160a01b0382166113a75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161062f565b6113b483838360016117f6565b826001600160a01b03166113c782610b93565b6001600160a01b0316146113ed5760405162461bcd60e51b815260040161062f906123ef565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6110b482826040518060200160405280600081525061187e565b6114a082611522565b6115035760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161062f565b600082815260066020908152604090912082516106d092840190611d22565b6000908152600260205260409020546001600160a01b0316151590565b6007546001600160a01b03163314610c8b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062f565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561164d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161062f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116c584848461130c565b6116d1848484846118b1565b6110ea5760405162461bcd60e51b815260040161062f9061239d565b60606116f8826111cf565b60008281526006602052604081208054611711906124fe565b80601f016020809104026020016040519081016040528092919081815260200182805461173d906124fe565b801561178a5780601f1061175f5761010080835404028352916020019161178a565b820191906000526020600020905b81548152906001019060200180831161176d57829003601f168201915b5050505050905060006117a860408051602081019091526000815290565b90508051600014156117bb575092915050565b8151156117ed5780826040516020016117d592919061221d565b60405160208183030381529060405292505050919050565b611304846119be565b60018111156110ea576001600160a01b0384161561183c576001600160a01b038416600090815260036020526040812080548392906118369084906124bb565b90915550505b6001600160a01b038316156110ea576001600160a01b038316600090815260036020526040812080548392906118739084906124a3565b909155505050505050565b6118888383611a32565b61189560008484846118b1565b6106d05760405162461bcd60e51b815260040161062f9061239d565b60006001600160a01b0384163b156119b357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906118f590339089908890889060040161224c565b602060405180830381600087803b15801561190f57600080fd5b505af192505050801561193f575060408051601f3d908101601f1916820190925261193c918101906120bc565b60015b611999573d80801561196d576040519150601f19603f3d011682016040523d82523d6000602084013e611972565b606091505b5080516119915760405162461bcd60e51b815260040161062f9061239d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611304565b506001949350505050565b60606119c9826111cf565b60006119e060408051602081019091526000815290565b90506000815111611a005760405180602001604052806000815250611a2b565b80611a0a84611bad565b604051602001611a1b92919061221d565b6040516020818303038152906040525b9392505050565b6001600160a01b038216611a885760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161062f565b611a9181611522565b15611ade5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062f565b611aec6000838360016117f6565b611af581611522565b15611b425760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062f565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000611bba83611c4a565b600101905060008167ffffffffffffffff811115611bda57611bda612580565b6040519080825280601f01601f191660200182016040528015611c04576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c3d57611c42565b611c0e565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611c895772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611cb5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611cd357662386f26fc10000830492506010015b6305f5e1008310611ceb576305f5e100830492506008015b6127108310611cff57612710830492506004015b60648310611d11576064830492506002015b600a831061048f5760010192915050565b828054611d2e906124fe565b90600052602060002090601f016020900481019282611d505760008555611d96565b82601f10611d6957805160ff1916838001178555611d96565b82800160010185558215611d96579182015b82811115611d96578251825591602001919060010190611d7b565b50611da2929150611da6565b5090565b5b80821115611da25760008155600101611da7565b600067ffffffffffffffff80841115611dd657611dd6612580565b604051601f8501601f19908116603f01168101908282118183101715611dfe57611dfe612580565b81604052809350858152868686011115611e1757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611e4857600080fd5b919050565b600082601f830112611e5e57600080fd5b611a2b83833560208501611dbb565b600060208284031215611e7f57600080fd5b611a2b82611e31565b60008060408385031215611e9b57600080fd5b611ea483611e31565b9150611eb260208401611e31565b90509250929050565b600080600060608486031215611ed057600080fd5b611ed984611e31565b9250611ee760208501611e31565b9150604084013590509250925092565b60008060008060808587031215611f0d57600080fd5b611f1685611e31565b9350611f2460208601611e31565b925060408501359150606085013567ffffffffffffffff811115611f4757600080fd5b8501601f81018713611f5857600080fd5b611f6787823560208401611dbb565b91505092959194509250565b60008060408385031215611f8657600080fd5b611f8f83611e31565b915060208301358015158114611fa457600080fd5b809150509250929050565b60008060008060008060c08789031215611fc857600080fd5b611fd187611e31565b9550602087013567ffffffffffffffff80821115611fee57600080fd5b611ffa8a838b01611e4d565b9650604089013591508082111561201057600080fd5b61201c8a838b01611e4d565b9550606089013591508082111561203257600080fd5b61203e8a838b01611e4d565b94506080890135935060a089013591508082111561205b57600080fd5b5061206889828a01611e4d565b9150509295509295509295565b6000806040838503121561208857600080fd5b61209183611e31565b946020939093013593505050565b6000602082840312156120b157600080fd5b8135611a2b81612596565b6000602082840312156120ce57600080fd5b8151611a2b81612596565b600080600080600060a086880312156120f157600080fd5b853567ffffffffffffffff8082111561210957600080fd5b61211589838a01611e4d565b9650602088013591508082111561212b57600080fd5b61213789838a01611e4d565b9550604088013591508082111561214d57600080fd5b61215989838a01611e4d565b945060608801359350608088013591508082111561217657600080fd5b5061218388828901611e4d565b9150509295509295909350565b6000602082840312156121a257600080fd5b5035919050565b600080604083850312156121bc57600080fd5b82359150611eb260208401611e31565b6000806000606084860312156121e157600080fd5b83359250611ee760208501611e31565b600081518084526122098160208601602086016124d2565b601f01601f19169290920160200192915050565b6000835161222f8184602088016124d2565b8351908301906122438183602088016124d2565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061227f908301846121f1565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156122c1578351835292840192918401916001016122a5565b50909695505050505050565b602081526000611a2b60208301846121f1565b60006101008083526122f48184018c6121f1565b90508281036020840152612308818b6121f1565b9050828103604084015261231c818a6121f1565b606084019890985250506001600160a01b03948516608082015292151560a0840152921660c082015260e001529392505050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526012908201527113919508191bd95cc81b9bdd08195e1a5cdd60721b604082015260600190565b60208082526023908201527f4f6e6c7920666163746f72792063616e2063616c6c20746869732066756e637460408201526234b7b760e91b606082015260800190565b600082198211156124b6576124b6612554565b500190565b6000828210156124cd576124cd612554565b500390565b60005b838110156124ed5781810151838201526020016124d5565b838111156110ea5750506000910152565b600181811c9082168061251257607f821691505b6020821081141561253357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561254d5761254d612554565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146111cc57600080fdfea2646970667358221220f36beddc40a56cfc76f0c9854027c63d4705165f03f9174e268bee3a2e278b9a64736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80637d47a197116100f9578063b88d4fde11610097578063d424134111610071578063d4241341146103ce578063de11c94a146103e1578063e985e9c5146103f4578063f2fde38b1461043057600080fd5b8063b88d4fde14610395578063c2553f45146103a8578063c87b56dd146103bb57600080fd5b80639b2c2bba116100d35780639b2c2bba146103495780639cb003221461035c578063a223f7ef1461036f578063a22cb4651461038257600080fd5b80637d47a1971461031d5780638da5cb5b1461033057806395d89b411461034157600080fd5b806342842e0e1161016657806352de4ee51161014057806352de4ee5146102dc5780636352211e146102ef57806370a0823114610302578063715018a61461031557600080fd5b806342842e0e1461028f57806349541015146102a25780634fe83556146102c957600080fd5b8063081812fc116101a2578063081812fc14610226578063095ea7b31461025157806318160ddd1461026657806323b872dd1461027c57600080fd5b806301ffc9a7146101c957806306fdde03146101f157806307f2dd3114610206575b600080fd5b6101dc6101d736600461209f565b610443565b60405190151581526020015b60405180910390f35b6101f9610495565b6040516101e891906122cd565b610219610214366004611e6d565b610527565b6040516101e89190612289565b610239610234366004612190565b610593565b6040516001600160a01b0390911681526020016101e8565b61026461025f366004612075565b6105ba565b005b61026e6106d5565b6040519081526020016101e8565b61026461028a366004611ebb565b6106e5565b61026461029d366004611ebb565b610716565b6102b56102b0366004612190565b610731565b6040516101e89897969594939291906122e0565b61026e6102d73660046120d9565b61091f565b6102196102ea366004611e6d565b610ab4565b6102396102fd366004612190565b610b93565b61026e610310366004611e6d565b610bf3565b610264610c79565b61026461032b3660046121a9565b610c8d565b6007546001600160a01b0316610239565b6101f9610d41565b6102646103573660046121a9565b610d50565b61026461036a3660046121cc565b610e11565b61026e61037d366004611faf565b610edc565b610264610390366004611f73565b6110a9565b6102646103a3366004611ef7565b6110b8565b61026e6103b6366004612075565b6110f0565b6101f96103c9366004612190565b611121565b6102646103dc366004611e6d565b61112c565b600b54610239906001600160a01b031681565b6101dc610402366004611e88565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026461043e366004611e6d565b611156565b60006001600160e01b031982166380ac58cd60e01b148061047457506001600160e01b03198216635b5e139f60e01b145b8061048f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104a4906124fe565b80601f01602080910402602001604051908101604052809291908181526020018280546104d0906124fe565b801561051d5780601f106104f25761010080835404028352916020019161051d565b820191906000526020600020905b81548152906001019060200180831161050057829003601f168201915b5050505050905090565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561058757602002820191906000526020600020905b815481526020019060010190808311610573575b50505050509050919050565b600061059e826111cf565b506000908152600460205260409020546001600160a01b031690565b60006105c582610b93565b9050806001600160a01b0316836001600160a01b031614156106385760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061065457506106548133610402565b6106c65760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161062f565b6106d0838361121f565b505050565b60006106e060085490565b905090565b6106ef338261128d565b61070b5760405162461bcd60e51b815260040161062f90612350565b6106d083838361130c565b6106d0838383604051806020016040528060008152506110b8565b60096020526000908152604090208054819061074c906124fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610778906124fe565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b5050505050908060010180546107da906124fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610806906124fe565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b505050505090806002018054610868906124fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610894906124fe565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b50505050600383015460048401546005850154600690950154939491936001600160a01b038083169450600160a01b90920460ff1692919091169088565b600061092f600880546001019055565b600061093a60085490565b9050610946338261147d565b6109508184611497565b6040805161010081018252888152602080820189905281830188905260608201879052336080830152600060a0830181905260c083018190524260e0840152848152600982529290922081518051929391926109af9284920190611d22565b5060208281015180516109c89260018501920190611d22565b50604082015180516109e4916002840191602090910190611d22565b5060608201516003820155608082015160048201805460a08501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560c0830151600583018054919092166001600160a01b03199190911617905560e090910151600690910155336000818152600a60209081526040808320805460018101825590845291909220018390555182907f06becd955c918828f6e985541acbf49cc842c9e9bd569fffc7698e721ef1357590610aa2908b906122cd565b60405180910390a39695505050505050565b60606000610ac183610bf3565b905060008167ffffffffffffffff811115610ade57610ade612580565b604051908082528060200260200182016040528015610b07578160200160208202803683370190505b509050600060015b6008548111610b8957610b2181611522565b8015610b465750856001600160a01b0316610b3b82610b93565b6001600160a01b0316145b15610b775780838381518110610b5e57610b5e61256a565b602090810291909101015281610b7381612539565b9250505b80610b8181612539565b915050610b0f565b5090949350505050565b6000818152600260205260408120546001600160a01b03168061048f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161062f565b60006001600160a01b038216610c5d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161062f565b506001600160a01b031660009081526003602052604090205490565b610c8161153f565b610c8b6000611599565b565b600b546001600160a01b03163314610cb75760405162461bcd60e51b815260040161062f90612460565b610cc082611522565b610cdc5760405162461bcd60e51b815260040161062f90612434565b60008281526009602052604080822060048101805460ff60a01b1916905560050180546001600160a01b0319169055516001600160a01b0383169184917fc60768ab441b1506842432a17e68a1b1058e73dca3d3cefce45ebfbd29e491649190a35050565b6060600180546104a4906124fe565b600b546001600160a01b03163314610d7a5760405162461bcd60e51b815260040161062f90612460565b610d8382611522565b610d9f5760405162461bcd60e51b815260040161062f90612434565b60008281526009602052604080822060048101805460ff60a01b1916600160a01b17905560050180546001600160a01b0385166001600160a01b031990911681179091559051909184917ffc527a684d417f2df00b0d726bf64fbe530fbf7218671ffc83f9c23d0870cf059190a35050565b600b546001600160a01b03163314610e3b5760405162461bcd60e51b815260040161062f90612460565b610e4483611522565b610e605760405162461bcd60e51b815260040161062f90612434565b60008381526009602052604080822060048101805460ff60a01b1916600160a01b1790556005810180546001600160a01b0387166001600160a01b0319909116811790915560039091018490559051909185917ffc527a684d417f2df00b0d726bf64fbe530fbf7218671ffc83f9c23d0870cf059190a3505050565b600b546000906001600160a01b03163314610f095760405162461bcd60e51b815260040161062f90612460565b610f17600880546001019055565b6000610f2260085490565b9050610f2e888261147d565b610f388184611497565b60408051610100810182528881526020808201899052818301889052606082018790526001600160a01b038b166080830152600060a0830181905260c083018190524260e084015284815260098252929092208151805192939192610fa09284920190611d22565b506020828101518051610fb99260018501920190611d22565b5060408201518051610fd5916002840191602090910190611d22565b5060608201516003820155608082015160048201805460a08501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560c08301516005830180549183166001600160a01b03199290921691909117905560e09092015160069091015588166000818152600a60209081526040808320805460018101825590845291909220018390555182907f06becd955c918828f6e985541acbf49cc842c9e9bd569fffc7698e721ef1357590611096908b906122cd565b60405180910390a3979650505050505050565b6110b43383836115eb565b5050565b6110c2338361128d565b6110de5760405162461bcd60e51b815260040161062f90612350565b6110ea848484846116ba565b50505050565b600a602052816000526040600020818154811061110c57600080fd5b90600052602060002001600091509150505481565b606061048f826116ed565b61113461153f565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b61115e61153f565b6001600160a01b0381166111c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062f565b6111cc81611599565b50565b6111d881611522565b6111cc5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161062f565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061125482610b93565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061129983610b93565b9050806001600160a01b0316846001600160a01b031614806112e057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113045750836001600160a01b03166112f984610593565b6001600160a01b0316145b949350505050565b826001600160a01b031661131f82610b93565b6001600160a01b0316146113455760405162461bcd60e51b815260040161062f906123ef565b6001600160a01b0382166113a75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161062f565b6113b483838360016117f6565b826001600160a01b03166113c782610b93565b6001600160a01b0316146113ed5760405162461bcd60e51b815260040161062f906123ef565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6110b482826040518060200160405280600081525061187e565b6114a082611522565b6115035760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161062f565b600082815260066020908152604090912082516106d092840190611d22565b6000908152600260205260409020546001600160a01b0316151590565b6007546001600160a01b03163314610c8b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062f565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561164d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161062f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116c584848461130c565b6116d1848484846118b1565b6110ea5760405162461bcd60e51b815260040161062f9061239d565b60606116f8826111cf565b60008281526006602052604081208054611711906124fe565b80601f016020809104026020016040519081016040528092919081815260200182805461173d906124fe565b801561178a5780601f1061175f5761010080835404028352916020019161178a565b820191906000526020600020905b81548152906001019060200180831161176d57829003601f168201915b5050505050905060006117a860408051602081019091526000815290565b90508051600014156117bb575092915050565b8151156117ed5780826040516020016117d592919061221d565b60405160208183030381529060405292505050919050565b611304846119be565b60018111156110ea576001600160a01b0384161561183c576001600160a01b038416600090815260036020526040812080548392906118369084906124bb565b90915550505b6001600160a01b038316156110ea576001600160a01b038316600090815260036020526040812080548392906118739084906124a3565b909155505050505050565b6118888383611a32565b61189560008484846118b1565b6106d05760405162461bcd60e51b815260040161062f9061239d565b60006001600160a01b0384163b156119b357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906118f590339089908890889060040161224c565b602060405180830381600087803b15801561190f57600080fd5b505af192505050801561193f575060408051601f3d908101601f1916820190925261193c918101906120bc565b60015b611999573d80801561196d576040519150601f19603f3d011682016040523d82523d6000602084013e611972565b606091505b5080516119915760405162461bcd60e51b815260040161062f9061239d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611304565b506001949350505050565b60606119c9826111cf565b60006119e060408051602081019091526000815290565b90506000815111611a005760405180602001604052806000815250611a2b565b80611a0a84611bad565b604051602001611a1b92919061221d565b6040516020818303038152906040525b9392505050565b6001600160a01b038216611a885760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161062f565b611a9181611522565b15611ade5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062f565b611aec6000838360016117f6565b611af581611522565b15611b425760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062f565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000611bba83611c4a565b600101905060008167ffffffffffffffff811115611bda57611bda612580565b6040519080825280601f01601f191660200182016040528015611c04576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c3d57611c42565b611c0e565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611c895772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611cb5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611cd357662386f26fc10000830492506010015b6305f5e1008310611ceb576305f5e100830492506008015b6127108310611cff57612710830492506004015b60648310611d11576064830492506002015b600a831061048f5760010192915050565b828054611d2e906124fe565b90600052602060002090601f016020900481019282611d505760008555611d96565b82601f10611d6957805160ff1916838001178555611d96565b82800160010185558215611d96579182015b82811115611d96578251825591602001919060010190611d7b565b50611da2929150611da6565b5090565b5b80821115611da25760008155600101611da7565b600067ffffffffffffffff80841115611dd657611dd6612580565b604051601f8501601f19908116603f01168101908282118183101715611dfe57611dfe612580565b81604052809350858152868686011115611e1757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611e4857600080fd5b919050565b600082601f830112611e5e57600080fd5b611a2b83833560208501611dbb565b600060208284031215611e7f57600080fd5b611a2b82611e31565b60008060408385031215611e9b57600080fd5b611ea483611e31565b9150611eb260208401611e31565b90509250929050565b600080600060608486031215611ed057600080fd5b611ed984611e31565b9250611ee760208501611e31565b9150604084013590509250925092565b60008060008060808587031215611f0d57600080fd5b611f1685611e31565b9350611f2460208601611e31565b925060408501359150606085013567ffffffffffffffff811115611f4757600080fd5b8501601f81018713611f5857600080fd5b611f6787823560208401611dbb565b91505092959194509250565b60008060408385031215611f8657600080fd5b611f8f83611e31565b915060208301358015158114611fa457600080fd5b809150509250929050565b60008060008060008060c08789031215611fc857600080fd5b611fd187611e31565b9550602087013567ffffffffffffffff80821115611fee57600080fd5b611ffa8a838b01611e4d565b9650604089013591508082111561201057600080fd5b61201c8a838b01611e4d565b9550606089013591508082111561203257600080fd5b61203e8a838b01611e4d565b94506080890135935060a089013591508082111561205b57600080fd5b5061206889828a01611e4d565b9150509295509295509295565b6000806040838503121561208857600080fd5b61209183611e31565b946020939093013593505050565b6000602082840312156120b157600080fd5b8135611a2b81612596565b6000602082840312156120ce57600080fd5b8151611a2b81612596565b600080600080600060a086880312156120f157600080fd5b853567ffffffffffffffff8082111561210957600080fd5b61211589838a01611e4d565b9650602088013591508082111561212b57600080fd5b61213789838a01611e4d565b9550604088013591508082111561214d57600080fd5b61215989838a01611e4d565b945060608801359350608088013591508082111561217657600080fd5b5061218388828901611e4d565b9150509295509295909350565b6000602082840312156121a257600080fd5b5035919050565b600080604083850312156121bc57600080fd5b82359150611eb260208401611e31565b6000806000606084860312156121e157600080fd5b83359250611ee760208501611e31565b600081518084526122098160208601602086016124d2565b601f01601f19169290920160200192915050565b6000835161222f8184602088016124d2565b8351908301906122438183602088016124d2565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061227f908301846121f1565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156122c1578351835292840192918401916001016122a5565b50909695505050505050565b602081526000611a2b60208301846121f1565b60006101008083526122f48184018c6121f1565b90508281036020840152612308818b6121f1565b9050828103604084015261231c818a6121f1565b606084019890985250506001600160a01b03948516608082015292151560a0840152921660c082015260e001529392505050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526012908201527113919508191bd95cc81b9bdd08195e1a5cdd60721b604082015260600190565b60208082526023908201527f4f6e6c7920666163746f72792063616e2063616c6c20746869732066756e637460408201526234b7b760e91b606082015260800190565b600082198211156124b6576124b6612554565b500190565b6000828210156124cd576124cd612554565b500390565b60005b838110156124ed5781810151838201526020016124d5565b838111156110ea5750506000910152565b600181811c9082168061251257607f821691505b6020821081141561253357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561254d5761254d612554565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146111cc57600080fdfea2646970667358221220f36beddc40a56cfc76f0c9854027c63d4705165f03f9174e268bee3a2e278b9a64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCreatedNFTs(address)": {
        "params": {
          "creator": "创建者地址"
        },
        "returns": {
          "_0": "tokenIds NFT ID数组"
        }
      },
      "getUserNFTs(address)": {
        "params": {
          "user": "用户地址"
        },
        "returns": {
          "_0": "tokenIds NFT ID数组"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "markAsAuctioned(uint256,address)": {
        "params": {
          "auctionContract": "拍卖合约地址",
          "tokenId": "NFT ID"
        }
      },
      "markAsAuctionedWithPrice(uint256,address,uint256)": {
        "params": {
          "auctionContract": "拍卖合约地址",
          "newMinPrice": "新的最低价格",
          "tokenId": "NFT ID"
        }
      },
      "markAsNotAuctioned(uint256,address)": {
        "params": {
          "tokenId": "NFT ID",
          "winner": "拍卖获胜者地址"
        }
      },
      "mintAuctionNFT(address,string,string,string,uint256,string)": {
        "params": {
          "description": "物品描述",
          "imageHash": "IPFS图片哈希",
          "metadataURI": "NFT元数据URI",
          "minPrice": "最低出价",
          "name": "物品名称",
          "to": "NFT接收者"
        },
        "returns": {
          "_0": "tokenId 新铸造的NFT ID"
        }
      },
      "mintNFT(string,string,string,uint256,string)": {
        "params": {
          "description": "物品描述",
          "imageHash": "IPFS图片哈希",
          "metadataURI": "NFT元数据URI",
          "minPrice": "最低出价",
          "name": "物品名称"
        },
        "returns": {
          "_0": "tokenId 新铸造的NFT ID"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setFactoryContract(address)": {
        "params": {
          "_factoryContract": "工厂合约地址"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "totalSupply()": {
        "returns": {
          "_0": "总数量"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "拍卖NFT合约",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCreatedNFTs(address)": {
        "notice": "获取用户创建的所有NFT"
      },
      "getUserNFTs(address)": {
        "notice": "获取用户拥有的所有NFT"
      },
      "markAsAuctioned(uint256,address)": {
        "notice": "标记NFT已拍卖（只能由工厂合约调用）"
      },
      "markAsAuctionedWithPrice(uint256,address,uint256)": {
        "notice": "标记NFT已拍卖并更新最低价格（只能由工厂合约调用）"
      },
      "markAsNotAuctioned(uint256,address)": {
        "notice": "标记NFT拍卖已结束，恢复为可出售状态（只能由工厂合约调用）"
      },
      "mintAuctionNFT(address,string,string,string,uint256,string)": {
        "notice": "铸造NFT（只能由工厂合约调用）"
      },
      "mintNFT(string,string,string,uint256,string)": {
        "notice": "公开的NFT铸造函数（用户可直接调用）"
      },
      "setFactoryContract(address)": {
        "notice": "设置工厂合约地址"
      },
      "totalSupply()": {
        "notice": "获取总NFT数量"
      }
    },
    "notice": "管理拍卖物品的NFT化，每个拍卖物品都是唯一的NFT",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1204,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2865,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1701_storage"
      },
      {
        "astId": 2887,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "nftMetadata",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(NFTMetadata)2882_storage)"
      },
      {
        "astId": 2892,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "creatorNFTs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2894,
        "contract": "contracts/AuctionNFT.sol:AuctionNFT",
        "label": "factoryContract",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTMetadata)2882_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AuctionNFT.NFTMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTMetadata)2882_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1701_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1700,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NFTMetadata)2882_storage": {
        "encoding": "inplace",
        "label": "struct AuctionNFT.NFTMetadata",
        "members": [
          {
            "astId": 2867,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2869,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2871,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "imageHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2873,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "minPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2875,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2877,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "isAuctioned",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 2879,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "auctionContract",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2881,
            "contract": "contracts/AuctionNFT.sol:AuctionNFT",
            "label": "createTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}