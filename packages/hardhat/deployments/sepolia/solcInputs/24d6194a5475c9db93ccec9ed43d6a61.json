{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/AuctionNFT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n/// @title 拍卖NFT合约\r\n/// @notice 管理拍卖物品的NFT化，每个拍卖物品都是唯一的NFT\r\ncontract AuctionNFT is ERC721, ERC721URIStorage, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    // NFT计数器\r\n    Counters.Counter private _tokenIdCounter;\r\n    \r\n    // NFT元数据结构\r\n    struct NFTMetadata {\r\n        string name;           // 物品名称\r\n        string description;    // 物品描述\r\n        string imageHash;      // IPFS图片哈希\r\n        uint256 minPrice;      // 最低出价\r\n        address creator;       // 创建者\r\n        bool isAuctioned;      // 是否已拍卖\r\n        address auctionContract; // 关联的拍卖合约地址\r\n        uint256 createTime;    // 创建时间\r\n    }\r\n    \r\n    // NFT元数据映射\r\n    mapping(uint256 => NFTMetadata) public nftMetadata;\r\n    \r\n    // 创建者的NFT列表\r\n    mapping(address => uint256[]) public creatorNFTs;\r\n    \r\n    // 拍卖工厂合约地址（只有工厂合约可以铸造NFT）\r\n    address public factoryContract;\r\n    \r\n    // 事件\r\n    event NFTMinted(uint256 indexed tokenId, address indexed creator, string name);\r\n    event NFTAuctioned(uint256 indexed tokenId, address indexed auctionContract);\r\n    event NFTAuctionEnded(uint256 indexed tokenId, address indexed winner);\r\n    \r\n    constructor() ERC721(\"AuctionNFT\", \"ANFT\") {}\r\n    \r\n    /// @notice 设置工厂合约地址\r\n    /// @param _factoryContract 工厂合约地址\r\n    function setFactoryContract(address _factoryContract) external onlyOwner {\r\n        factoryContract = _factoryContract;\r\n    }\r\n    \r\n    modifier onlyFactory() {\r\n        require(msg.sender == factoryContract, \"Only factory can call this function\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice 公开的NFT铸造函数（用户可直接调用）\r\n    /// @param name 物品名称\r\n    /// @param description 物品描述\r\n    /// @param imageHash IPFS图片哈希\r\n    /// @param minPrice 最低出价\r\n    /// @param metadataURI NFT元数据URI\r\n    /// @return tokenId 新铸造的NFT ID\r\n    function mintNFT(\r\n        string memory name,\r\n        string memory description, \r\n        string memory imageHash,\r\n        uint256 minPrice,\r\n        string memory metadataURI\r\n    ) external returns (uint256) {\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        \r\n        _safeMint(msg.sender, tokenId);\r\n        _setTokenURI(tokenId, metadataURI);\r\n        \r\n        // 设置NFT元数据\r\n        nftMetadata[tokenId] = NFTMetadata({\r\n            name: name,\r\n            description: description,\r\n            imageHash: imageHash,\r\n            minPrice: minPrice,\r\n            creator: msg.sender,\r\n            isAuctioned: false,\r\n            auctionContract: address(0),\r\n            createTime: block.timestamp\r\n        });\r\n        \r\n        // 添加到创建者列表\r\n        creatorNFTs[msg.sender].push(tokenId);\r\n        \r\n        emit NFTMinted(tokenId, msg.sender, name);\r\n        \r\n        return tokenId;\r\n    }\r\n    \r\n    /// @notice 铸造NFT（只能由工厂合约调用）\r\n    /// @param to NFT接收者\r\n    /// @param name 物品名称\r\n    /// @param description 物品描述\r\n    /// @param imageHash IPFS图片哈希\r\n    /// @param minPrice 最低出价\r\n    /// @param metadataURI NFT元数据URI\r\n    /// @return tokenId 新铸造的NFT ID\r\n    function mintAuctionNFT(\r\n        address to,\r\n        string memory name,\r\n        string memory description, \r\n        string memory imageHash,\r\n        uint256 minPrice,\r\n        string memory metadataURI\r\n    ) external onlyFactory returns (uint256) {\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        \r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, metadataURI);\r\n        \r\n        // 设置NFT元数据\r\n        nftMetadata[tokenId] = NFTMetadata({\r\n            name: name,\r\n            description: description,\r\n            imageHash: imageHash,\r\n            minPrice: minPrice,\r\n            creator: to,\r\n            isAuctioned: false,\r\n            auctionContract: address(0),\r\n            createTime: block.timestamp\r\n        });\r\n        \r\n        // 添加到创建者列表\r\n        creatorNFTs[to].push(tokenId);\r\n        \r\n        emit NFTMinted(tokenId, to, name);\r\n        \r\n        return tokenId;\r\n    }\r\n    \r\n    /// @notice 标记NFT已拍卖（只能由工厂合约调用）\r\n    /// @param tokenId NFT ID\r\n    /// @param auctionContract 拍卖合约地址\r\n    function markAsAuctioned(uint256 tokenId, address auctionContract) external onlyFactory {\r\n        require(_exists(tokenId), \"NFT does not exist\");\r\n        nftMetadata[tokenId].isAuctioned = true;\r\n        nftMetadata[tokenId].auctionContract = auctionContract;\r\n        \r\n        emit NFTAuctioned(tokenId, auctionContract);\r\n    }\r\n    \r\n    /// @notice 标记NFT已拍卖并更新最低价格（只能由工厂合约调用）\r\n    /// @param tokenId NFT ID\r\n    /// @param auctionContract 拍卖合约地址\r\n    /// @param newMinPrice 新的最低价格\r\n    function markAsAuctionedWithPrice(uint256 tokenId, address auctionContract, uint256 newMinPrice) external onlyFactory {\r\n        require(_exists(tokenId), \"NFT does not exist\");\r\n        nftMetadata[tokenId].isAuctioned = true;\r\n        nftMetadata[tokenId].auctionContract = auctionContract;\r\n        nftMetadata[tokenId].minPrice = newMinPrice;\r\n        \r\n        emit NFTAuctioned(tokenId, auctionContract);\r\n    }\r\n    \r\n    /// @notice 标记NFT拍卖已结束，恢复为可出售状态（只能由工厂合约调用）\r\n    /// @param tokenId NFT ID\r\n    /// @param winner 拍卖获胜者地址\r\n    function markAsNotAuctioned(uint256 tokenId, address winner) external onlyFactory {\r\n        require(_exists(tokenId), \"NFT does not exist\");\r\n        nftMetadata[tokenId].isAuctioned = false;\r\n        nftMetadata[tokenId].auctionContract = address(0);\r\n        \r\n        emit NFTAuctionEnded(tokenId, winner);\r\n    }\r\n    \r\n    /// @notice 获取用户拥有的所有NFT\r\n    /// @param user 用户地址\r\n    /// @return tokenIds NFT ID数组\r\n    function getUserNFTs(address user) external view returns (uint256[] memory) {\r\n        uint256 balance = balanceOf(user);\r\n        uint256[] memory tokenIds = new uint256[](balance);\r\n        uint256 index = 0;\r\n        \r\n        for (uint256 i = 1; i <= _tokenIdCounter.current(); i++) {\r\n            if (_exists(i) && ownerOf(i) == user) {\r\n                tokenIds[index] = i;\r\n                index++;\r\n            }\r\n        }\r\n        \r\n        return tokenIds;\r\n    }\r\n    \r\n    /// @notice 获取用户创建的所有NFT\r\n    /// @param creator 创建者地址\r\n    /// @return tokenIds NFT ID数组\r\n    function getCreatedNFTs(address creator) external view returns (uint256[] memory) {\r\n        return creatorNFTs[creator];\r\n    }\r\n    \r\n    /// @notice 获取总NFT数量\r\n    /// @return 总数量\r\n    function totalSupply() external view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n    \r\n    // 重写必要的函数\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n} "
    },
    "contracts/BlindAuction.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.4;\n\nimport \"./AuctionNFT.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/// @title 工厂合约接口\ninterface IBlindAuctionFactory {\n    function notifyAuctionEnded(uint256 nftTokenId, address winner) external;\n}\n\n/// @title 盲拍（Blind Auction）智能合约\n/// @notice 该合约允许用户进行匿名竞标，之后再披露出价，保障竞标的公平性，支持NFT自动转移    \ncontract BlindAuction is IERC721Receiver {\n    // 结构体：表示一个盲拍出价，包含加密后的出价和押金\n    struct Bid {\n        bytes32 blindedBid; // 使用 keccak256(value, fake, secret) 生成的哈希值\n        uint deposit;       // 随出价一同发送的押金\n    }\n\n    address payable public beneficiary; // 拍卖受益人，最终收到最高出价金额的人\n    uint public biddingStart;           // 竞标开始时间（时间戳）\n    uint public biddingEnd;             // 竞标结束时间（时间戳）\n    uint public revealEnd;              // 披露阶段结束时间（时间戳）\n    bool public ended;                  // 拍卖是否已结束\n\n    mapping(address => Bid[]) public bids; // 每个地址对应的出价列表\n\n    address public highestBidder; // 当前最高出价者\n    uint public highestBid;       // 当前最高出价金额\n\n    // 可取回的竞标押金（如果不是最高出价）\n    mapping(address => uint) pendingReturns;\n\n    // NFT相关\n    uint256 public nftTokenId;    // 关联的NFT ID（0表示传统拍卖）\n    AuctionNFT public nftContract; // NFT合约引用\n    bool public isNFTAuction;     // 是否为NFT拍卖\n    address public factory;       // 工厂合约地址，用于权限控制\n\n    // 拍卖结束事件\n    event AuctionEnded(address winner, uint highestBid, uint256 nftTokenId);\n    // 增加竞标事件便于前端监听\n    event BidSubmitted(address bidder, uint deposit);\n    // 披露竞标结果事件\n    event BidRevealed(address bidder, uint value, bool success);\n    // NFT转移事件\n    event NFTTransferred(uint256 indexed tokenId, address indexed from, address indexed to);\n\n    // 自定义错误信息（gas 优化方式）\n    error TooEarly(uint time);             // 函数调用过早\n    error TooLate(uint time);              // 函数调用过晚\n    error AuctionEndAlreadyCalled();       // auctionEnd 函数已被调用过\n\n    /// 修饰符：要求当前时间小于指定时间，主要用于限制 bid 阶段调用\n    modifier onlyBefore(uint time) {\n        if (block.timestamp >= time) revert TooLate(time);\n        _;\n    }\n\n    /// 修饰符：要求当前时间大于指定时间，主要用于 reveal 和 auctionEnd\n    modifier onlyAfter(uint time) {\n        if (block.timestamp <= time) revert TooEarly(time);\n        _;\n    }\n\n    /// 构造函数，初始化受益人、竞标开始时间和各阶段时长，支持NFT\n    /// @param startTime 竞标开始时间（时间戳）\n    /// @param biddingTime 竞标阶段的持续时间（秒）\n    /// @param revealTime 披露阶段的持续时间（秒）\n    /// @param beneficiaryAddress 受益人地址\n    /// @param _nftTokenId NFT ID（0表示传统拍卖）\n    /// @param _nftContract NFT合约地址\n    constructor(\n        uint startTime,\n        uint biddingTime,\n        uint revealTime,\n        address payable beneficiaryAddress,\n        uint256 _nftTokenId,\n        address _nftContract\n    ) {\n        beneficiary = beneficiaryAddress;\n        biddingStart = startTime;\n        biddingEnd = startTime + biddingTime;\n        revealEnd = biddingEnd + revealTime;\n        factory = msg.sender; // 设置工厂合约地址\n        \n        nftTokenId = _nftTokenId;\n        isNFTAuction = _nftTokenId > 0;\n        \n        if (isNFTAuction) {\n            nftContract = AuctionNFT(_nftContract);\n        }\n    }\n\n    /// 用户提交盲拍（加密的出价）\n    /// @param blindedBid 加密后的出价值（keccak256(value, fake, secret)）\n    function bid(bytes32 blindedBid)\n        external\n        payable\n        onlyAfter(biddingStart)  // 只能在竞标开始后调用\n        onlyBefore(biddingEnd)   // 只能在竞标阶段调用\n    {\n        // 将出价加入当前用户的出价列表\n        bids[msg.sender].push(Bid({\n            blindedBid: blindedBid,\n            deposit: msg.value\n        }));\n        \n        // 触发竞标事件\n        emit BidSubmitted(msg.sender, msg.value);\n    }\n\n    /// 披露阶段：用户公开其盲拍的真实数据\n    /// @param values 出价金额数组\n    /// @param fakes 是否为假出价（true 表示该出价为虚假）\n    /// @param secrets 每个出价对应的私密值\n    function reveal(\n        uint[] calldata values,\n        bool[] calldata fakes,\n        bytes32[] calldata secrets\n    )\n        external\n        onlyAfter(biddingEnd)    // 只能在竞标结束后调用\n        onlyBefore(revealEnd)    // 且必须在披露阶段结束前\n    {\n        uint length = bids[msg.sender].length;\n        require(values.length == length, \"Array lengths do not match\");\n        require(fakes.length == length, \"Array lengths do not match\");\n        require(secrets.length == length, \"Array lengths do not match\");\n\n        uint refund = 0; // 最终需要退还的金额\n\n        for (uint i = 0; i < length; i++) {\n            Bid storage bidToCheck = bids[msg.sender][i];\n\n            // 拿到用户的披露数据\n            (uint value, bool fake, bytes32 secret) =\n                    (values[i], fakes[i], secrets[i]);\n\n            // 校验 hash 是否一致，验证盲拍的合法性\n            if (bidToCheck.blindedBid != keccak256(abi.encodePacked(value, fake, secret))) {\n                // 如果不一致，则该出价作废，不退还押金\n                continue;\n            }\n\n            refund += bidToCheck.deposit; // 押金暂时计入退款\n\n            // 如果不是假出价，并且押金大于等于出价金额\n            if (!fake && bidToCheck.deposit >= value) {\n                // 尝试将其设置为当前最高出价\n                if (placeBid(msg.sender, value)) {\n                    refund -= value; // 成为最高出价则不能退还该部分\n                    emit BidRevealed(msg.sender, value, true);\n                } else {\n                    emit BidRevealed(msg.sender, value, false);\n                }\n            } else {\n                emit BidRevealed(msg.sender, 0, false);\n            }\n\n            // 重置该出价，防止重复认领\n            bidToCheck.blindedBid = bytes32(0);\n        }\n\n        // 修改：将应退还金额加入到pendingReturns而不是立即退还\n        // 这样所有押金都会在拍卖结束后统一通过withdraw()函数领取\n        if (refund > 0) {\n            pendingReturns[msg.sender] += refund;\n        }\n    }\n\n    /// 用户取回未成功的竞标所冻结的押金\n    function withdraw() external {\n        uint amount = pendingReturns[msg.sender];\n        if (amount > 0) {\n            // 防止重入攻击：先置 0\n            pendingReturns[msg.sender] = 0;\n            payable(msg.sender).transfer(amount);\n        }\n    }\n\n    /// 结束拍卖：只能调用一次，将最高出价金额转给受益人，自动转移NFT\n    function auctionEnd()\n        external\n        onlyAfter(revealEnd) // 只能在披露阶段后调用\n    {\n        if (ended) revert AuctionEndAlreadyCalled();\n\n        emit AuctionEnded(highestBidder, highestBid, nftTokenId); // 触发拍卖结束事件\n\n        ended = true;\n\n        // 如果是NFT拍卖且有最高出价者，转移NFT\n        if (isNFTAuction && highestBidder != address(0)) {\n            // 将NFT转移给最高出价者\n            nftContract.transferFrom(address(this), highestBidder, nftTokenId);\n            emit NFTTransferred(nftTokenId, address(this), highestBidder);\n            \n            // 通知工厂合约更新NFT状态\n            IBlindAuctionFactory(factory).notifyAuctionEnded(nftTokenId, highestBidder);\n        } else if (isNFTAuction) {\n            // 如果没有有效出价，NFT退回给创建者\n            nftContract.transferFrom(address(this), beneficiary, nftTokenId);\n            emit NFTTransferred(nftTokenId, address(this), beneficiary);\n            \n            // 通知工厂合约更新NFT状态\n            IBlindAuctionFactory(factory).notifyAuctionEnded(nftTokenId, beneficiary);\n        }\n\n        // 转账给受益人\n        if (highestBid > 0) {\n            beneficiary.transfer(highestBid);\n        }\n    }\n\n    /// 内部函数：尝试设置新的最高出价\n    /// @param bidder 出价人地址\n    /// @param value 出价金额\n    function placeBid(address bidder, uint value) internal\n            returns (bool success)\n    {\n        if (value <= highestBid) {\n            return false; // 不是最高出价，忽略\n        }\n\n        // 如果已有最高出价者，则先退还之前的出价\n        if (highestBidder != address(0)) {\n            pendingReturns[highestBidder] += highestBid;\n        }\n\n        // 设置新的最高出价者和出价\n        highestBid = value;\n        highestBidder = bidder;\n        return true;\n    }\n    \n    /// 查询竞标开始剩余时间\n    function biddingStartTimeLeft() public view returns (uint) {\n        if (block.timestamp >= biddingStart) return 0;\n        return biddingStart - block.timestamp;\n    }\n    \n    /// 查询竞标阶段剩余时间\n    function biddingTimeLeft() public view returns (uint) {\n        if (block.timestamp >= biddingEnd) return 0;\n        return biddingEnd - block.timestamp;\n    }\n    \n    /// 查询披露阶段剩余时间\n    function revealTimeLeft() public view returns (uint) {\n        if (block.timestamp <= biddingEnd) return 0;\n        if (block.timestamp >= revealEnd) return 0;\n        return revealEnd - block.timestamp;\n    }\n    \n    /// 获取用户的出价数量\n    function getBidCount(address bidder) public view returns (uint) {\n        return bids[bidder].length;\n    }\n    \n    /// 获取竞标阶段状态\n    /// @return 0-未开始 1-竞标阶段 2-披露阶段 3-拍卖结束\n    function getAuctionPhase() public view returns (uint) {\n        if (block.timestamp < biddingStart) return 0; // 未开始\n        if (block.timestamp < biddingEnd) return 1;   // 竞标阶段\n        if (block.timestamp < revealEnd) return 2;    // 披露阶段\n        return 3; // 拍卖结束\n    }\n    \n    /// 获取NFT相关信息\n    /// @return isNFT 是否为NFT拍卖\n    /// @return tokenId NFT ID\n    /// @return nftOwner NFT当前所有者\n    function getNFTInfo() public view returns (bool isNFT, uint256 tokenId, address nftOwner) {\n        isNFT = isNFTAuction;\n        tokenId = nftTokenId;\n        if (isNFTAuction) {\n            try nftContract.ownerOf(nftTokenId) returns (address owner) {\n                nftOwner = owner;\n            } catch {\n                nftOwner = address(0);\n            }\n        } else {\n            nftOwner = address(0);\n        }\n    }\n    \n    /// 设置NFT Token ID（仅限工厂合约调用）\n    /// @param _nftTokenId 新的NFT Token ID\n    function setNFTTokenId(uint256 _nftTokenId) external {\n        require(msg.sender == factory, \"Only factory can set NFT token ID\");\n        nftTokenId = _nftTokenId;\n        isNFTAuction = _nftTokenId > 0;\n    }\n    \n    /// 实现IERC721Receiver接口，使合约能够接收NFT\n    /// @return bytes4 选择器，表示接收成功\n    function onERC721Received(\n        address /* operator */,\n        address /* from */,\n        uint256 /* tokenId */,\n        bytes calldata /* data */\n    ) external pure override returns (bytes4) {\n        // 返回正确的选择器表示接收成功\n        return IERC721Receiver.onERC721Received.selector;\n    }\n} "
    },
    "contracts/BlindAuctionFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\nimport \"./BlindAuction.sol\";\nimport \"./AuctionNFT.sol\";\n\n/// @title 盲拍工厂合约\n/// @notice 用于创建和管理多个盲拍合约，支持NFT铸造和二级市场\ncontract BlindAuctionFactory {\n    // NFT合约引用\n    AuctionNFT public nftContract;\n    \n    // 事件：新拍卖合约创建\n    event AuctionCreated(\n        address indexed auctionAddress,\n        address indexed beneficiary,\n        uint biddingStart,\n        uint biddingEnd,\n        uint revealEnd,\n        string metadata,\n        uint256 nftTokenId\n    );\n    \n    // 事件：NFT重新拍卖\n    event NFTResaleCreated(\n        address indexed auctionAddress,\n        address indexed seller,\n        uint256 indexed nftTokenId,\n        uint256 minPrice\n    );\n\n    // 用户创建的拍卖列表\n    mapping(address => address[]) public userAuctions;\n\n    // 所有创建的拍卖列表\n    address[] public allAuctions;\n    \n    // NFT ID 到拍卖合约的映射\n    mapping(uint256 => address) public nftToAuction;\n    \n    constructor(address _nftContract) {\n        nftContract = AuctionNFT(_nftContract);\n    }\n\n    /// @notice 创建NFT拍卖（铸造新NFT并创建拍卖）\n    /// @param startTime 竞标开始时间（时间戳）\n    /// @param biddingTime 竞标阶段的持续时间（秒）\n    /// @param revealTime 披露阶段的持续时间（秒）\n    /// @param metadata 拍卖元数据（JSON字符串）\n    /// @param nftMetadata NFT元数据\n    /// @return auctionAddress 新创建的盲拍合约地址\n    /// @return nftTokenId 新铸造的NFT ID\n    function createNFTAuction(\n        uint startTime,\n        uint biddingTime,\n        uint revealTime,\n        string memory metadata,\n        NFTCreationData memory nftMetadata\n    ) external returns (address auctionAddress, uint256 nftTokenId) {\n        // 首先创建新的盲拍合约（临时使用 nftTokenId = 0）\n        BlindAuction newAuction = new BlindAuction(\n            startTime,\n            biddingTime,\n            revealTime,\n            payable(msg.sender),\n            0, // 临时设置，稍后更新\n            address(nftContract)\n        );\n\n        auctionAddress = address(newAuction);\n\n        // 然后铸造NFT直接给拍卖合约\n        nftTokenId = nftContract.mintAuctionNFT(\n            auctionAddress, // 直接铸造给拍卖合约\n            nftMetadata.name,\n            nftMetadata.description,\n            nftMetadata.imageHash,\n            nftMetadata.minPrice,\n            nftMetadata.tokenURI\n        );\n        \n        // 更新拍卖合约中的NFT ID\n        newAuction.setNFTTokenId(nftTokenId);\n        \n        // 标记NFT已进入拍卖\n        nftContract.markAsAuctioned(nftTokenId, auctionAddress);\n\n        // 记录用户创建的拍卖\n        userAuctions[msg.sender].push(auctionAddress);\n\n        // 添加到所有拍卖列表\n        allAuctions.push(auctionAddress);\n        \n        // 记录NFT到拍卖的映射\n        nftToAuction[nftTokenId] = auctionAddress;\n\n        // 触发事件\n        emit AuctionCreated(\n            auctionAddress,\n            msg.sender,\n            startTime,\n            startTime + biddingTime,\n            startTime + biddingTime + revealTime,\n            metadata,\n            nftTokenId\n        );\n\n        return (auctionAddress, nftTokenId);\n    }\n    \n    /// @notice NFT二级市场：重新拍卖现有NFT\n    /// @param nftTokenId NFT ID\n    /// @param startTime 竞标开始时间\n    /// @param biddingTime 竞标阶段持续时间\n    /// @param revealTime 披露阶段持续时间\n    /// @param minPrice 最低出价\n    /// @return auctionAddress 新创建的拍卖合约地址\n    function resellNFT(\n        uint256 nftTokenId,\n        uint startTime,\n        uint biddingTime, \n        uint revealTime,\n        uint256 minPrice\n    ) external returns (address auctionAddress) {\n        // 验证调用者是NFT所有者\n        require(nftContract.ownerOf(nftTokenId) == msg.sender, \"Not NFT owner\");\n        \n        // 创建新的拍卖合约（二次销售）\n        BlindAuction newAuction = new BlindAuction(\n            startTime,\n            biddingTime,\n            revealTime,\n            payable(msg.sender), // 当前NFT所有者为受益人\n            nftTokenId,\n            address(nftContract)\n        );\n        \n        auctionAddress = address(newAuction);\n        \n        // 将NFT转移给拍卖合约托管\n        nftContract.transferFrom(msg.sender, auctionAddress, nftTokenId);\n        \n        // 标记NFT已拍卖并更新最低价格\n        nftContract.markAsAuctionedWithPrice(nftTokenId, auctionAddress, minPrice);\n        \n        // 记录拍卖信息\n        userAuctions[msg.sender].push(auctionAddress);\n        allAuctions.push(auctionAddress);\n        nftToAuction[nftTokenId] = auctionAddress;\n        \n        emit NFTResaleCreated(auctionAddress, msg.sender, nftTokenId, minPrice);\n        \n        return auctionAddress;\n    }\n\n    /// @notice 创建传统拍卖（不铸造NFT，向后兼容）\n    /// @param startTime 竞标开始时间（时间戳）\n    /// @param biddingTime 竞标阶段的持续时间（秒）\n    /// @param revealTime 披露阶段的持续时间（秒）\n    /// @param metadata 拍卖物品的元数据（JSON字符串）\n    /// @return 新创建的盲拍合约地址\n    function createAuction(\n        uint startTime,\n        uint biddingTime,\n        uint revealTime,\n        string memory metadata\n    ) external returns (address) {\n        // 创建新的盲拍合约（传统模式，不涉及NFT）\n        BlindAuction newAuction = new BlindAuction(\n            startTime,\n            biddingTime,\n            revealTime,\n            payable(msg.sender),\n            0, // nftTokenId = 0 表示传统拍卖\n            address(0) // 不使用NFT合约\n        );\n\n        address auctionAddress = address(newAuction);\n\n        // 记录用户创建的拍卖\n        userAuctions[msg.sender].push(auctionAddress);\n\n        // 添加到所有拍卖列表\n        allAuctions.push(auctionAddress);\n\n        // 触发事件\n        emit AuctionCreated(\n            auctionAddress,\n            msg.sender,\n            startTime,\n            startTime + biddingTime,\n            startTime + biddingTime + revealTime,\n            metadata,\n            0 // 传统拍卖没有NFT\n        );\n\n        return auctionAddress;\n    }\n\n    /// @notice 获取用户创建的所有拍卖\n    /// @param user 用户地址\n    /// @return 该用户创建的所有盲拍合约地址数组\n    function getUserAuctions(address user) external view returns (address[] memory) {\n        return userAuctions[user];\n    }\n\n    /// @notice 获取所有创建的拍卖数量\n    /// @return 拍卖总数\n    function getAuctionCount() external view returns (uint) {\n        return allAuctions.length;\n    }\n\n    /// @notice 获取所有拍卖地址\n    /// @param start 起始索引\n    /// @param count 获取数量\n    /// @return 拍卖地址数组\n    function getAuctions(uint256 start, uint256 count) external view returns (address[] memory) {\n        // 如果没有拍卖，直接返回空数组\n        if (allAuctions.length == 0) {\n            return new address[](0);\n        }\n        \n        // 如果起始索引超出范围，返回空数组\n        if (start >= allAuctions.length) {\n            return new address[](0);\n        }\n        \n        uint256 end = start + count;\n        if (end > allAuctions.length) {\n            end = allAuctions.length;\n        }\n        \n        address[] memory result = new address[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            result[i - start] = allAuctions[i];\n        }\n        \n        return result;\n    }\n    \n    /// @notice 获取NFT对应的拍卖合约\n    /// @param nftTokenId NFT ID\n    /// @return 拍卖合约地址\n    function getNFTAuction(uint256 nftTokenId) external view returns (address) {\n        return nftToAuction[nftTokenId];\n    }\n\n    /// @notice 拍卖结束通知函数（由拍卖合约调用）\n    /// @param nftTokenId NFT ID\n    /// @param winner 拍卖获胜者地址\n    function notifyAuctionEnded(uint256 nftTokenId, address winner) external {\n        // 验证调用者是有效的拍卖合约\n        require(nftToAuction[nftTokenId] == msg.sender, \"Invalid auction contract\");\n        \n        // 更新NFT状态为不再拍卖\n        nftContract.markAsNotAuctioned(nftTokenId, winner);\n    }\n}\n\n// NFT创建数据结构\nstruct NFTCreationData {\n    string name;\n    string description;\n    string imageHash;\n    uint256 minPrice;\n    string tokenURI;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}