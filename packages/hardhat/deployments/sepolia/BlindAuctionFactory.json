{
  "address": "0x38C68c3DF8088FA96B73aF2a090E1fd6f4F9418D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "biddingStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "biddingEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "NFTResaleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "biddingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revealTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "biddingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revealTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct NFTCreationData",
          "name": "nftMetadata",
          "type": "tuple"
        }
      ],
      "name": "createNFTAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getAuctions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAuctions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftContract",
      "outputs": [
        {
          "internalType": "contract AuctionNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftToAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "notifyAuctionEnded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "biddingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revealTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "resellNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7f57d5377d3635ee0c568dfa44392dbe7a989309a29803bf76c0a14c424fb65",
  "receipt": {
    "to": null,
    "from": "0x906CBCA3B02fd5BF783206883565c73A9Fc78e57",
    "contractAddress": "0x38C68c3DF8088FA96B73aF2a090E1fd6f4F9418D",
    "transactionIndex": 188,
    "gasUsed": "2150186",
    "logsBloom": "0x
    "blockHash": "0x7b82246d9b7f30ce38b7a24945e37970284e3622505a86b3b4a09a62683f1988",
    "transactionHash": "0xb7f57d5377d3635ee0c568dfa44392dbe7a989309a29803bf76c0a14c424fb65",
    "logs": [],
    "blockNumber": 8659931,
    "cumulativeGasUsed": "23027635",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39a693aeD7Ee5F7cc965c49a25F354B5F7Be397A"
  ],
  "numDeployments": 2,
  "solcInputHash": "24d6194a5475c9db93ccec9ed43d6a61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biddingStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biddingEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"NFTResaleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct NFTCreationData\",\"name\":\"nftMetadata\",\"type\":\"tuple\"}],\"name\":\"createNFTAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract AuctionNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftToAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"notifyAuctionEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"resellNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAuction(uint256,uint256,uint256,string)\":{\"params\":{\"biddingTime\":\"\\u7ade\\u6807\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\",\"metadata\":\"\\u62cd\\u5356\\u7269\\u54c1\\u7684\\u5143\\u6570\\u636e\\uff08JSON\\u5b57\\u7b26\\u4e32\\uff09\",\"revealTime\":\"\\u62ab\\u9732\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\",\"startTime\":\"\\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\"},\"returns\":{\"_0\":\"\\u65b0\\u521b\\u5efa\\u7684\\u76f2\\u62cd\\u5408\\u7ea6\\u5730\\u5740\"}},\"createNFTAuction(uint256,uint256,uint256,string,(string,string,string,uint256,string))\":{\"params\":{\"biddingTime\":\"\\u7ade\\u6807\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\",\"metadata\":\"\\u62cd\\u5356\\u5143\\u6570\\u636e\\uff08JSON\\u5b57\\u7b26\\u4e32\\uff09\",\"nftMetadata\":\"NFT\\u5143\\u6570\\u636e\",\"revealTime\":\"\\u62ab\\u9732\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\",\"startTime\":\"\\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\"},\"returns\":{\"auctionAddress\":\"\\u65b0\\u521b\\u5efa\\u7684\\u76f2\\u62cd\\u5408\\u7ea6\\u5730\\u5740\",\"nftTokenId\":\"\\u65b0\\u94f8\\u9020\\u7684NFT ID\"}},\"getAuctionCount()\":{\"returns\":{\"_0\":\"\\u62cd\\u5356\\u603b\\u6570\"}},\"getAuctions(uint256,uint256)\":{\"params\":{\"count\":\"\\u83b7\\u53d6\\u6570\\u91cf\",\"start\":\"\\u8d77\\u59cb\\u7d22\\u5f15\"},\"returns\":{\"_0\":\"\\u62cd\\u5356\\u5730\\u5740\\u6570\\u7ec4\"}},\"getNFTAuction(uint256)\":{\"params\":{\"nftTokenId\":\"NFT ID\"},\"returns\":{\"_0\":\"\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\"}},\"getUserAuctions(address)\":{\"params\":{\"user\":\"\\u7528\\u6237\\u5730\\u5740\"},\"returns\":{\"_0\":\"\\u8be5\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709\\u76f2\\u62cd\\u5408\\u7ea6\\u5730\\u5740\\u6570\\u7ec4\"}},\"notifyAuctionEnded(uint256,address)\":{\"params\":{\"nftTokenId\":\"NFT ID\",\"winner\":\"\\u62cd\\u5356\\u83b7\\u80dc\\u8005\\u5730\\u5740\"}},\"resellNFT(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"biddingTime\":\"\\u7ade\\u6807\\u9636\\u6bb5\\u6301\\u7eed\\u65f6\\u95f4\",\"minPrice\":\"\\u6700\\u4f4e\\u51fa\\u4ef7\",\"nftTokenId\":\"NFT ID\",\"revealTime\":\"\\u62ab\\u9732\\u9636\\u6bb5\\u6301\\u7eed\\u65f6\\u95f4\",\"startTime\":\"\\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\"},\"returns\":{\"auctionAddress\":\"\\u65b0\\u521b\\u5efa\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\"}}},\"title\":\"\\u76f2\\u62cd\\u5de5\\u5382\\u5408\\u7ea6\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAuction(uint256,uint256,uint256,string)\":{\"notice\":\"\\u521b\\u5efa\\u4f20\\u7edf\\u62cd\\u5356\\uff08\\u4e0d\\u94f8\\u9020NFT\\uff0c\\u5411\\u540e\\u517c\\u5bb9\\uff09\"},\"createNFTAuction(uint256,uint256,uint256,string,(string,string,string,uint256,string))\":{\"notice\":\"\\u521b\\u5efaNFT\\u62cd\\u5356\\uff08\\u94f8\\u9020\\u65b0NFT\\u5e76\\u521b\\u5efa\\u62cd\\u5356\\uff09\"},\"getAuctionCount()\":{\"notice\":\"\\u83b7\\u53d6\\u6240\\u6709\\u521b\\u5efa\\u7684\\u62cd\\u5356\\u6570\\u91cf\"},\"getAuctions(uint256,uint256)\":{\"notice\":\"\\u83b7\\u53d6\\u6240\\u6709\\u62cd\\u5356\\u5730\\u5740\"},\"getNFTAuction(uint256)\":{\"notice\":\"\\u83b7\\u53d6NFT\\u5bf9\\u5e94\\u7684\\u62cd\\u5356\\u5408\\u7ea6\"},\"getUserAuctions(address)\":{\"notice\":\"\\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709\\u62cd\\u5356\"},\"notifyAuctionEnded(uint256,address)\":{\"notice\":\"\\u62cd\\u5356\\u7ed3\\u675f\\u901a\\u77e5\\u51fd\\u6570\\uff08\\u7531\\u62cd\\u5356\\u5408\\u7ea6\\u8c03\\u7528\\uff09\"},\"resellNFT(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"NFT\\u4e8c\\u7ea7\\u5e02\\u573a\\uff1a\\u91cd\\u65b0\\u62cd\\u5356\\u73b0\\u6709NFT\"}},\"notice\":\"\\u7528\\u4e8e\\u521b\\u5efa\\u548c\\u7ba1\\u7406\\u591a\\u4e2a\\u76f2\\u62cd\\u5408\\u7ea6\\uff0c\\u652f\\u6301NFT\\u94f8\\u9020\\u548c\\u4e8c\\u7ea7\\u5e02\\u573a\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlindAuctionFactory.sol\":\"BlindAuctionFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AuctionNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n/// @title \\u62cd\\u5356NFT\\u5408\\u7ea6\\r\\n/// @notice \\u7ba1\\u7406\\u62cd\\u5356\\u7269\\u54c1\\u7684NFT\\u5316\\uff0c\\u6bcf\\u4e2a\\u62cd\\u5356\\u7269\\u54c1\\u90fd\\u662f\\u552f\\u4e00\\u7684NFT\\r\\ncontract AuctionNFT is ERC721, ERC721URIStorage, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // NFT\\u8ba1\\u6570\\u5668\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n    \\r\\n    // NFT\\u5143\\u6570\\u636e\\u7ed3\\u6784\\r\\n    struct NFTMetadata {\\r\\n        string name;           // \\u7269\\u54c1\\u540d\\u79f0\\r\\n        string description;    // \\u7269\\u54c1\\u63cf\\u8ff0\\r\\n        string imageHash;      // IPFS\\u56fe\\u7247\\u54c8\\u5e0c\\r\\n        uint256 minPrice;      // \\u6700\\u4f4e\\u51fa\\u4ef7\\r\\n        address creator;       // \\u521b\\u5efa\\u8005\\r\\n        bool isAuctioned;      // \\u662f\\u5426\\u5df2\\u62cd\\u5356\\r\\n        address auctionContract; // \\u5173\\u8054\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\r\\n        uint256 createTime;    // \\u521b\\u5efa\\u65f6\\u95f4\\r\\n    }\\r\\n    \\r\\n    // NFT\\u5143\\u6570\\u636e\\u6620\\u5c04\\r\\n    mapping(uint256 => NFTMetadata) public nftMetadata;\\r\\n    \\r\\n    // \\u521b\\u5efa\\u8005\\u7684NFT\\u5217\\u8868\\r\\n    mapping(address => uint256[]) public creatorNFTs;\\r\\n    \\r\\n    // \\u62cd\\u5356\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\uff08\\u53ea\\u6709\\u5de5\\u5382\\u5408\\u7ea6\\u53ef\\u4ee5\\u94f8\\u9020NFT\\uff09\\r\\n    address public factoryContract;\\r\\n    \\r\\n    // \\u4e8b\\u4ef6\\r\\n    event NFTMinted(uint256 indexed tokenId, address indexed creator, string name);\\r\\n    event NFTAuctioned(uint256 indexed tokenId, address indexed auctionContract);\\r\\n    event NFTAuctionEnded(uint256 indexed tokenId, address indexed winner);\\r\\n    \\r\\n    constructor() ERC721(\\\"AuctionNFT\\\", \\\"ANFT\\\") {}\\r\\n    \\r\\n    /// @notice \\u8bbe\\u7f6e\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\r\\n    /// @param _factoryContract \\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function setFactoryContract(address _factoryContract) external onlyOwner {\\r\\n        factoryContract = _factoryContract;\\r\\n    }\\r\\n    \\r\\n    modifier onlyFactory() {\\r\\n        require(msg.sender == factoryContract, \\\"Only factory can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u516c\\u5f00\\u7684NFT\\u94f8\\u9020\\u51fd\\u6570\\uff08\\u7528\\u6237\\u53ef\\u76f4\\u63a5\\u8c03\\u7528\\uff09\\r\\n    /// @param name \\u7269\\u54c1\\u540d\\u79f0\\r\\n    /// @param description \\u7269\\u54c1\\u63cf\\u8ff0\\r\\n    /// @param imageHash IPFS\\u56fe\\u7247\\u54c8\\u5e0c\\r\\n    /// @param minPrice \\u6700\\u4f4e\\u51fa\\u4ef7\\r\\n    /// @param metadataURI NFT\\u5143\\u6570\\u636eURI\\r\\n    /// @return tokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\\r\\n    function mintNFT(\\r\\n        string memory name,\\r\\n        string memory description, \\r\\n        string memory imageHash,\\r\\n        uint256 minPrice,\\r\\n        string memory metadataURI\\r\\n    ) external returns (uint256) {\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        \\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _setTokenURI(tokenId, metadataURI);\\r\\n        \\r\\n        // \\u8bbe\\u7f6eNFT\\u5143\\u6570\\u636e\\r\\n        nftMetadata[tokenId] = NFTMetadata({\\r\\n            name: name,\\r\\n            description: description,\\r\\n            imageHash: imageHash,\\r\\n            minPrice: minPrice,\\r\\n            creator: msg.sender,\\r\\n            isAuctioned: false,\\r\\n            auctionContract: address(0),\\r\\n            createTime: block.timestamp\\r\\n        });\\r\\n        \\r\\n        // \\u6dfb\\u52a0\\u5230\\u521b\\u5efa\\u8005\\u5217\\u8868\\r\\n        creatorNFTs[msg.sender].push(tokenId);\\r\\n        \\r\\n        emit NFTMinted(tokenId, msg.sender, name);\\r\\n        \\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u94f8\\u9020NFT\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param to NFT\\u63a5\\u6536\\u8005\\r\\n    /// @param name \\u7269\\u54c1\\u540d\\u79f0\\r\\n    /// @param description \\u7269\\u54c1\\u63cf\\u8ff0\\r\\n    /// @param imageHash IPFS\\u56fe\\u7247\\u54c8\\u5e0c\\r\\n    /// @param minPrice \\u6700\\u4f4e\\u51fa\\u4ef7\\r\\n    /// @param metadataURI NFT\\u5143\\u6570\\u636eURI\\r\\n    /// @return tokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\\r\\n    function mintAuctionNFT(\\r\\n        address to,\\r\\n        string memory name,\\r\\n        string memory description, \\r\\n        string memory imageHash,\\r\\n        uint256 minPrice,\\r\\n        string memory metadataURI\\r\\n    ) external onlyFactory returns (uint256) {\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        \\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, metadataURI);\\r\\n        \\r\\n        // \\u8bbe\\u7f6eNFT\\u5143\\u6570\\u636e\\r\\n        nftMetadata[tokenId] = NFTMetadata({\\r\\n            name: name,\\r\\n            description: description,\\r\\n            imageHash: imageHash,\\r\\n            minPrice: minPrice,\\r\\n            creator: to,\\r\\n            isAuctioned: false,\\r\\n            auctionContract: address(0),\\r\\n            createTime: block.timestamp\\r\\n        });\\r\\n        \\r\\n        // \\u6dfb\\u52a0\\u5230\\u521b\\u5efa\\u8005\\u5217\\u8868\\r\\n        creatorNFTs[to].push(tokenId);\\r\\n        \\r\\n        emit NFTMinted(tokenId, to, name);\\r\\n        \\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param tokenId NFT ID\\r\\n    /// @param auctionContract \\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\r\\n    function markAsAuctioned(uint256 tokenId, address auctionContract) external onlyFactory {\\r\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\r\\n        nftMetadata[tokenId].isAuctioned = true;\\r\\n        nftMetadata[tokenId].auctionContract = auctionContract;\\r\\n        \\r\\n        emit NFTAuctioned(tokenId, auctionContract);\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\u5e76\\u66f4\\u65b0\\u6700\\u4f4e\\u4ef7\\u683c\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param tokenId NFT ID\\r\\n    /// @param auctionContract \\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\r\\n    /// @param newMinPrice \\u65b0\\u7684\\u6700\\u4f4e\\u4ef7\\u683c\\r\\n    function markAsAuctionedWithPrice(uint256 tokenId, address auctionContract, uint256 newMinPrice) external onlyFactory {\\r\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\r\\n        nftMetadata[tokenId].isAuctioned = true;\\r\\n        nftMetadata[tokenId].auctionContract = auctionContract;\\r\\n        nftMetadata[tokenId].minPrice = newMinPrice;\\r\\n        \\r\\n        emit NFTAuctioned(tokenId, auctionContract);\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u6807\\u8bb0NFT\\u62cd\\u5356\\u5df2\\u7ed3\\u675f\\uff0c\\u6062\\u590d\\u4e3a\\u53ef\\u51fa\\u552e\\u72b6\\u6001\\uff08\\u53ea\\u80fd\\u7531\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\r\\n    /// @param tokenId NFT ID\\r\\n    /// @param winner \\u62cd\\u5356\\u83b7\\u80dc\\u8005\\u5730\\u5740\\r\\n    function markAsNotAuctioned(uint256 tokenId, address winner) external onlyFactory {\\r\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\r\\n        nftMetadata[tokenId].isAuctioned = false;\\r\\n        nftMetadata[tokenId].auctionContract = address(0);\\r\\n        \\r\\n        emit NFTAuctionEnded(tokenId, winner);\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u83b7\\u53d6\\u7528\\u6237\\u62e5\\u6709\\u7684\\u6240\\u6709NFT\\r\\n    /// @param user \\u7528\\u6237\\u5730\\u5740\\r\\n    /// @return tokenIds NFT ID\\u6570\\u7ec4\\r\\n    function getUserNFTs(address user) external view returns (uint256[] memory) {\\r\\n        uint256 balance = balanceOf(user);\\r\\n        uint256[] memory tokenIds = new uint256[](balance);\\r\\n        uint256 index = 0;\\r\\n        \\r\\n        for (uint256 i = 1; i <= _tokenIdCounter.current(); i++) {\\r\\n            if (_exists(i) && ownerOf(i) == user) {\\r\\n                tokenIds[index] = i;\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return tokenIds;\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709NFT\\r\\n    /// @param creator \\u521b\\u5efa\\u8005\\u5730\\u5740\\r\\n    /// @return tokenIds NFT ID\\u6570\\u7ec4\\r\\n    function getCreatedNFTs(address creator) external view returns (uint256[] memory) {\\r\\n        return creatorNFTs[creator];\\r\\n    }\\r\\n    \\r\\n    /// @notice \\u83b7\\u53d6\\u603bNFT\\u6570\\u91cf\\r\\n    /// @return \\u603b\\u6570\\u91cf\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n    \\r\\n    // \\u91cd\\u5199\\u5fc5\\u8981\\u7684\\u51fd\\u6570\\r\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n} \",\"keccak256\":\"0xb27fcce1cdd987262a50fd07e047dde9b1e76a5a51a01199fa6e0cdf573e131b\",\"license\":\"GPL-3.0\"},\"contracts/BlindAuction.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"./AuctionNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/// @title \\u5de5\\u5382\\u5408\\u7ea6\\u63a5\\u53e3\\ninterface IBlindAuctionFactory {\\n    function notifyAuctionEnded(uint256 nftTokenId, address winner) external;\\n}\\n\\n/// @title \\u76f2\\u62cd\\uff08Blind Auction\\uff09\\u667a\\u80fd\\u5408\\u7ea6\\n/// @notice \\u8be5\\u5408\\u7ea6\\u5141\\u8bb8\\u7528\\u6237\\u8fdb\\u884c\\u533f\\u540d\\u7ade\\u6807\\uff0c\\u4e4b\\u540e\\u518d\\u62ab\\u9732\\u51fa\\u4ef7\\uff0c\\u4fdd\\u969c\\u7ade\\u6807\\u7684\\u516c\\u5e73\\u6027\\uff0c\\u652f\\u6301NFT\\u81ea\\u52a8\\u8f6c\\u79fb    \\ncontract BlindAuction is IERC721Receiver {\\n    // \\u7ed3\\u6784\\u4f53\\uff1a\\u8868\\u793a\\u4e00\\u4e2a\\u76f2\\u62cd\\u51fa\\u4ef7\\uff0c\\u5305\\u542b\\u52a0\\u5bc6\\u540e\\u7684\\u51fa\\u4ef7\\u548c\\u62bc\\u91d1\\n    struct Bid {\\n        bytes32 blindedBid; // \\u4f7f\\u7528 keccak256(value, fake, secret) \\u751f\\u6210\\u7684\\u54c8\\u5e0c\\u503c\\n        uint deposit;       // \\u968f\\u51fa\\u4ef7\\u4e00\\u540c\\u53d1\\u9001\\u7684\\u62bc\\u91d1\\n    }\\n\\n    address payable public beneficiary; // \\u62cd\\u5356\\u53d7\\u76ca\\u4eba\\uff0c\\u6700\\u7ec8\\u6536\\u5230\\u6700\\u9ad8\\u51fa\\u4ef7\\u91d1\\u989d\\u7684\\u4eba\\n    uint public biddingStart;           // \\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n    uint public biddingEnd;             // \\u7ade\\u6807\\u7ed3\\u675f\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n    uint public revealEnd;              // \\u62ab\\u9732\\u9636\\u6bb5\\u7ed3\\u675f\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n    bool public ended;                  // \\u62cd\\u5356\\u662f\\u5426\\u5df2\\u7ed3\\u675f\\n\\n    mapping(address => Bid[]) public bids; // \\u6bcf\\u4e2a\\u5730\\u5740\\u5bf9\\u5e94\\u7684\\u51fa\\u4ef7\\u5217\\u8868\\n\\n    address public highestBidder; // \\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\n    uint public highestBid;       // \\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\u91d1\\u989d\\n\\n    // \\u53ef\\u53d6\\u56de\\u7684\\u7ade\\u6807\\u62bc\\u91d1\\uff08\\u5982\\u679c\\u4e0d\\u662f\\u6700\\u9ad8\\u51fa\\u4ef7\\uff09\\n    mapping(address => uint) pendingReturns;\\n\\n    // NFT\\u76f8\\u5173\\n    uint256 public nftTokenId;    // \\u5173\\u8054\\u7684NFT ID\\uff080\\u8868\\u793a\\u4f20\\u7edf\\u62cd\\u5356\\uff09\\n    AuctionNFT public nftContract; // NFT\\u5408\\u7ea6\\u5f15\\u7528\\n    bool public isNFTAuction;     // \\u662f\\u5426\\u4e3aNFT\\u62cd\\u5356\\n    address public factory;       // \\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\uff0c\\u7528\\u4e8e\\u6743\\u9650\\u63a7\\u5236\\n\\n    // \\u62cd\\u5356\\u7ed3\\u675f\\u4e8b\\u4ef6\\n    event AuctionEnded(address winner, uint highestBid, uint256 nftTokenId);\\n    // \\u589e\\u52a0\\u7ade\\u6807\\u4e8b\\u4ef6\\u4fbf\\u4e8e\\u524d\\u7aef\\u76d1\\u542c\\n    event BidSubmitted(address bidder, uint deposit);\\n    // \\u62ab\\u9732\\u7ade\\u6807\\u7ed3\\u679c\\u4e8b\\u4ef6\\n    event BidRevealed(address bidder, uint value, bool success);\\n    // NFT\\u8f6c\\u79fb\\u4e8b\\u4ef6\\n    event NFTTransferred(uint256 indexed tokenId, address indexed from, address indexed to);\\n\\n    // \\u81ea\\u5b9a\\u4e49\\u9519\\u8bef\\u4fe1\\u606f\\uff08gas \\u4f18\\u5316\\u65b9\\u5f0f\\uff09\\n    error TooEarly(uint time);             // \\u51fd\\u6570\\u8c03\\u7528\\u8fc7\\u65e9\\n    error TooLate(uint time);              // \\u51fd\\u6570\\u8c03\\u7528\\u8fc7\\u665a\\n    error AuctionEndAlreadyCalled();       // auctionEnd \\u51fd\\u6570\\u5df2\\u88ab\\u8c03\\u7528\\u8fc7\\n\\n    /// \\u4fee\\u9970\\u7b26\\uff1a\\u8981\\u6c42\\u5f53\\u524d\\u65f6\\u95f4\\u5c0f\\u4e8e\\u6307\\u5b9a\\u65f6\\u95f4\\uff0c\\u4e3b\\u8981\\u7528\\u4e8e\\u9650\\u5236 bid \\u9636\\u6bb5\\u8c03\\u7528\\n    modifier onlyBefore(uint time) {\\n        if (block.timestamp >= time) revert TooLate(time);\\n        _;\\n    }\\n\\n    /// \\u4fee\\u9970\\u7b26\\uff1a\\u8981\\u6c42\\u5f53\\u524d\\u65f6\\u95f4\\u5927\\u4e8e\\u6307\\u5b9a\\u65f6\\u95f4\\uff0c\\u4e3b\\u8981\\u7528\\u4e8e reveal \\u548c auctionEnd\\n    modifier onlyAfter(uint time) {\\n        if (block.timestamp <= time) revert TooEarly(time);\\n        _;\\n    }\\n\\n    /// \\u6784\\u9020\\u51fd\\u6570\\uff0c\\u521d\\u59cb\\u5316\\u53d7\\u76ca\\u4eba\\u3001\\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\u548c\\u5404\\u9636\\u6bb5\\u65f6\\u957f\\uff0c\\u652f\\u6301NFT\\n    /// @param startTime \\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n    /// @param biddingTime \\u7ade\\u6807\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n    /// @param revealTime \\u62ab\\u9732\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n    /// @param beneficiaryAddress \\u53d7\\u76ca\\u4eba\\u5730\\u5740\\n    /// @param _nftTokenId NFT ID\\uff080\\u8868\\u793a\\u4f20\\u7edf\\u62cd\\u5356\\uff09\\n    /// @param _nftContract NFT\\u5408\\u7ea6\\u5730\\u5740\\n    constructor(\\n        uint startTime,\\n        uint biddingTime,\\n        uint revealTime,\\n        address payable beneficiaryAddress,\\n        uint256 _nftTokenId,\\n        address _nftContract\\n    ) {\\n        beneficiary = beneficiaryAddress;\\n        biddingStart = startTime;\\n        biddingEnd = startTime + biddingTime;\\n        revealEnd = biddingEnd + revealTime;\\n        factory = msg.sender; // \\u8bbe\\u7f6e\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\n        \\n        nftTokenId = _nftTokenId;\\n        isNFTAuction = _nftTokenId > 0;\\n        \\n        if (isNFTAuction) {\\n            nftContract = AuctionNFT(_nftContract);\\n        }\\n    }\\n\\n    /// \\u7528\\u6237\\u63d0\\u4ea4\\u76f2\\u62cd\\uff08\\u52a0\\u5bc6\\u7684\\u51fa\\u4ef7\\uff09\\n    /// @param blindedBid \\u52a0\\u5bc6\\u540e\\u7684\\u51fa\\u4ef7\\u503c\\uff08keccak256(value, fake, secret)\\uff09\\n    function bid(bytes32 blindedBid)\\n        external\\n        payable\\n        onlyAfter(biddingStart)  // \\u53ea\\u80fd\\u5728\\u7ade\\u6807\\u5f00\\u59cb\\u540e\\u8c03\\u7528\\n        onlyBefore(biddingEnd)   // \\u53ea\\u80fd\\u5728\\u7ade\\u6807\\u9636\\u6bb5\\u8c03\\u7528\\n    {\\n        // \\u5c06\\u51fa\\u4ef7\\u52a0\\u5165\\u5f53\\u524d\\u7528\\u6237\\u7684\\u51fa\\u4ef7\\u5217\\u8868\\n        bids[msg.sender].push(Bid({\\n            blindedBid: blindedBid,\\n            deposit: msg.value\\n        }));\\n        \\n        // \\u89e6\\u53d1\\u7ade\\u6807\\u4e8b\\u4ef6\\n        emit BidSubmitted(msg.sender, msg.value);\\n    }\\n\\n    /// \\u62ab\\u9732\\u9636\\u6bb5\\uff1a\\u7528\\u6237\\u516c\\u5f00\\u5176\\u76f2\\u62cd\\u7684\\u771f\\u5b9e\\u6570\\u636e\\n    /// @param values \\u51fa\\u4ef7\\u91d1\\u989d\\u6570\\u7ec4\\n    /// @param fakes \\u662f\\u5426\\u4e3a\\u5047\\u51fa\\u4ef7\\uff08true \\u8868\\u793a\\u8be5\\u51fa\\u4ef7\\u4e3a\\u865a\\u5047\\uff09\\n    /// @param secrets \\u6bcf\\u4e2a\\u51fa\\u4ef7\\u5bf9\\u5e94\\u7684\\u79c1\\u5bc6\\u503c\\n    function reveal(\\n        uint[] calldata values,\\n        bool[] calldata fakes,\\n        bytes32[] calldata secrets\\n    )\\n        external\\n        onlyAfter(biddingEnd)    // \\u53ea\\u80fd\\u5728\\u7ade\\u6807\\u7ed3\\u675f\\u540e\\u8c03\\u7528\\n        onlyBefore(revealEnd)    // \\u4e14\\u5fc5\\u987b\\u5728\\u62ab\\u9732\\u9636\\u6bb5\\u7ed3\\u675f\\u524d\\n    {\\n        uint length = bids[msg.sender].length;\\n        require(values.length == length, \\\"Array lengths do not match\\\");\\n        require(fakes.length == length, \\\"Array lengths do not match\\\");\\n        require(secrets.length == length, \\\"Array lengths do not match\\\");\\n\\n        uint refund = 0; // \\u6700\\u7ec8\\u9700\\u8981\\u9000\\u8fd8\\u7684\\u91d1\\u989d\\n\\n        for (uint i = 0; i < length; i++) {\\n            Bid storage bidToCheck = bids[msg.sender][i];\\n\\n            // \\u62ff\\u5230\\u7528\\u6237\\u7684\\u62ab\\u9732\\u6570\\u636e\\n            (uint value, bool fake, bytes32 secret) =\\n                    (values[i], fakes[i], secrets[i]);\\n\\n            // \\u6821\\u9a8c hash \\u662f\\u5426\\u4e00\\u81f4\\uff0c\\u9a8c\\u8bc1\\u76f2\\u62cd\\u7684\\u5408\\u6cd5\\u6027\\n            if (bidToCheck.blindedBid != keccak256(abi.encodePacked(value, fake, secret))) {\\n                // \\u5982\\u679c\\u4e0d\\u4e00\\u81f4\\uff0c\\u5219\\u8be5\\u51fa\\u4ef7\\u4f5c\\u5e9f\\uff0c\\u4e0d\\u9000\\u8fd8\\u62bc\\u91d1\\n                continue;\\n            }\\n\\n            refund += bidToCheck.deposit; // \\u62bc\\u91d1\\u6682\\u65f6\\u8ba1\\u5165\\u9000\\u6b3e\\n\\n            // \\u5982\\u679c\\u4e0d\\u662f\\u5047\\u51fa\\u4ef7\\uff0c\\u5e76\\u4e14\\u62bc\\u91d1\\u5927\\u4e8e\\u7b49\\u4e8e\\u51fa\\u4ef7\\u91d1\\u989d\\n            if (!fake && bidToCheck.deposit >= value) {\\n                // \\u5c1d\\u8bd5\\u5c06\\u5176\\u8bbe\\u7f6e\\u4e3a\\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\n                if (placeBid(msg.sender, value)) {\\n                    refund -= value; // \\u6210\\u4e3a\\u6700\\u9ad8\\u51fa\\u4ef7\\u5219\\u4e0d\\u80fd\\u9000\\u8fd8\\u8be5\\u90e8\\u5206\\n                    emit BidRevealed(msg.sender, value, true);\\n                } else {\\n                    emit BidRevealed(msg.sender, value, false);\\n                }\\n            } else {\\n                emit BidRevealed(msg.sender, 0, false);\\n            }\\n\\n            // \\u91cd\\u7f6e\\u8be5\\u51fa\\u4ef7\\uff0c\\u9632\\u6b62\\u91cd\\u590d\\u8ba4\\u9886\\n            bidToCheck.blindedBid = bytes32(0);\\n        }\\n\\n        // \\u4fee\\u6539\\uff1a\\u5c06\\u5e94\\u9000\\u8fd8\\u91d1\\u989d\\u52a0\\u5165\\u5230pendingReturns\\u800c\\u4e0d\\u662f\\u7acb\\u5373\\u9000\\u8fd8\\n        // \\u8fd9\\u6837\\u6240\\u6709\\u62bc\\u91d1\\u90fd\\u4f1a\\u5728\\u62cd\\u5356\\u7ed3\\u675f\\u540e\\u7edf\\u4e00\\u901a\\u8fc7withdraw()\\u51fd\\u6570\\u9886\\u53d6\\n        if (refund > 0) {\\n            pendingReturns[msg.sender] += refund;\\n        }\\n    }\\n\\n    /// \\u7528\\u6237\\u53d6\\u56de\\u672a\\u6210\\u529f\\u7684\\u7ade\\u6807\\u6240\\u51bb\\u7ed3\\u7684\\u62bc\\u91d1\\n    function withdraw() external {\\n        uint amount = pendingReturns[msg.sender];\\n        if (amount > 0) {\\n            // \\u9632\\u6b62\\u91cd\\u5165\\u653b\\u51fb\\uff1a\\u5148\\u7f6e 0\\n            pendingReturns[msg.sender] = 0;\\n            payable(msg.sender).transfer(amount);\\n        }\\n    }\\n\\n    /// \\u7ed3\\u675f\\u62cd\\u5356\\uff1a\\u53ea\\u80fd\\u8c03\\u7528\\u4e00\\u6b21\\uff0c\\u5c06\\u6700\\u9ad8\\u51fa\\u4ef7\\u91d1\\u989d\\u8f6c\\u7ed9\\u53d7\\u76ca\\u4eba\\uff0c\\u81ea\\u52a8\\u8f6c\\u79fbNFT\\n    function auctionEnd()\\n        external\\n        onlyAfter(revealEnd) // \\u53ea\\u80fd\\u5728\\u62ab\\u9732\\u9636\\u6bb5\\u540e\\u8c03\\u7528\\n    {\\n        if (ended) revert AuctionEndAlreadyCalled();\\n\\n        emit AuctionEnded(highestBidder, highestBid, nftTokenId); // \\u89e6\\u53d1\\u62cd\\u5356\\u7ed3\\u675f\\u4e8b\\u4ef6\\n\\n        ended = true;\\n\\n        // \\u5982\\u679c\\u662fNFT\\u62cd\\u5356\\u4e14\\u6709\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\uff0c\\u8f6c\\u79fbNFT\\n        if (isNFTAuction && highestBidder != address(0)) {\\n            // \\u5c06NFT\\u8f6c\\u79fb\\u7ed9\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\n            nftContract.transferFrom(address(this), highestBidder, nftTokenId);\\n            emit NFTTransferred(nftTokenId, address(this), highestBidder);\\n            \\n            // \\u901a\\u77e5\\u5de5\\u5382\\u5408\\u7ea6\\u66f4\\u65b0NFT\\u72b6\\u6001\\n            IBlindAuctionFactory(factory).notifyAuctionEnded(nftTokenId, highestBidder);\\n        } else if (isNFTAuction) {\\n            // \\u5982\\u679c\\u6ca1\\u6709\\u6709\\u6548\\u51fa\\u4ef7\\uff0cNFT\\u9000\\u56de\\u7ed9\\u521b\\u5efa\\u8005\\n            nftContract.transferFrom(address(this), beneficiary, nftTokenId);\\n            emit NFTTransferred(nftTokenId, address(this), beneficiary);\\n            \\n            // \\u901a\\u77e5\\u5de5\\u5382\\u5408\\u7ea6\\u66f4\\u65b0NFT\\u72b6\\u6001\\n            IBlindAuctionFactory(factory).notifyAuctionEnded(nftTokenId, beneficiary);\\n        }\\n\\n        // \\u8f6c\\u8d26\\u7ed9\\u53d7\\u76ca\\u4eba\\n        if (highestBid > 0) {\\n            beneficiary.transfer(highestBid);\\n        }\\n    }\\n\\n    /// \\u5185\\u90e8\\u51fd\\u6570\\uff1a\\u5c1d\\u8bd5\\u8bbe\\u7f6e\\u65b0\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\n    /// @param bidder \\u51fa\\u4ef7\\u4eba\\u5730\\u5740\\n    /// @param value \\u51fa\\u4ef7\\u91d1\\u989d\\n    function placeBid(address bidder, uint value) internal\\n            returns (bool success)\\n    {\\n        if (value <= highestBid) {\\n            return false; // \\u4e0d\\u662f\\u6700\\u9ad8\\u51fa\\u4ef7\\uff0c\\u5ffd\\u7565\\n        }\\n\\n        // \\u5982\\u679c\\u5df2\\u6709\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\uff0c\\u5219\\u5148\\u9000\\u8fd8\\u4e4b\\u524d\\u7684\\u51fa\\u4ef7\\n        if (highestBidder != address(0)) {\\n            pendingReturns[highestBidder] += highestBid;\\n        }\\n\\n        // \\u8bbe\\u7f6e\\u65b0\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\u548c\\u51fa\\u4ef7\\n        highestBid = value;\\n        highestBidder = bidder;\\n        return true;\\n    }\\n    \\n    /// \\u67e5\\u8be2\\u7ade\\u6807\\u5f00\\u59cb\\u5269\\u4f59\\u65f6\\u95f4\\n    function biddingStartTimeLeft() public view returns (uint) {\\n        if (block.timestamp >= biddingStart) return 0;\\n        return biddingStart - block.timestamp;\\n    }\\n    \\n    /// \\u67e5\\u8be2\\u7ade\\u6807\\u9636\\u6bb5\\u5269\\u4f59\\u65f6\\u95f4\\n    function biddingTimeLeft() public view returns (uint) {\\n        if (block.timestamp >= biddingEnd) return 0;\\n        return biddingEnd - block.timestamp;\\n    }\\n    \\n    /// \\u67e5\\u8be2\\u62ab\\u9732\\u9636\\u6bb5\\u5269\\u4f59\\u65f6\\u95f4\\n    function revealTimeLeft() public view returns (uint) {\\n        if (block.timestamp <= biddingEnd) return 0;\\n        if (block.timestamp >= revealEnd) return 0;\\n        return revealEnd - block.timestamp;\\n    }\\n    \\n    /// \\u83b7\\u53d6\\u7528\\u6237\\u7684\\u51fa\\u4ef7\\u6570\\u91cf\\n    function getBidCount(address bidder) public view returns (uint) {\\n        return bids[bidder].length;\\n    }\\n    \\n    /// \\u83b7\\u53d6\\u7ade\\u6807\\u9636\\u6bb5\\u72b6\\u6001\\n    /// @return 0-\\u672a\\u5f00\\u59cb 1-\\u7ade\\u6807\\u9636\\u6bb5 2-\\u62ab\\u9732\\u9636\\u6bb5 3-\\u62cd\\u5356\\u7ed3\\u675f\\n    function getAuctionPhase() public view returns (uint) {\\n        if (block.timestamp < biddingStart) return 0; // \\u672a\\u5f00\\u59cb\\n        if (block.timestamp < biddingEnd) return 1;   // \\u7ade\\u6807\\u9636\\u6bb5\\n        if (block.timestamp < revealEnd) return 2;    // \\u62ab\\u9732\\u9636\\u6bb5\\n        return 3; // \\u62cd\\u5356\\u7ed3\\u675f\\n    }\\n    \\n    /// \\u83b7\\u53d6NFT\\u76f8\\u5173\\u4fe1\\u606f\\n    /// @return isNFT \\u662f\\u5426\\u4e3aNFT\\u62cd\\u5356\\n    /// @return tokenId NFT ID\\n    /// @return nftOwner NFT\\u5f53\\u524d\\u6240\\u6709\\u8005\\n    function getNFTInfo() public view returns (bool isNFT, uint256 tokenId, address nftOwner) {\\n        isNFT = isNFTAuction;\\n        tokenId = nftTokenId;\\n        if (isNFTAuction) {\\n            try nftContract.ownerOf(nftTokenId) returns (address owner) {\\n                nftOwner = owner;\\n            } catch {\\n                nftOwner = address(0);\\n            }\\n        } else {\\n            nftOwner = address(0);\\n        }\\n    }\\n    \\n    /// \\u8bbe\\u7f6eNFT Token ID\\uff08\\u4ec5\\u9650\\u5de5\\u5382\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\n    /// @param _nftTokenId \\u65b0\\u7684NFT Token ID\\n    function setNFTTokenId(uint256 _nftTokenId) external {\\n        require(msg.sender == factory, \\\"Only factory can set NFT token ID\\\");\\n        nftTokenId = _nftTokenId;\\n        isNFTAuction = _nftTokenId > 0;\\n    }\\n    \\n    /// \\u5b9e\\u73b0IERC721Receiver\\u63a5\\u53e3\\uff0c\\u4f7f\\u5408\\u7ea6\\u80fd\\u591f\\u63a5\\u6536NFT\\n    /// @return bytes4 \\u9009\\u62e9\\u5668\\uff0c\\u8868\\u793a\\u63a5\\u6536\\u6210\\u529f\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        // \\u8fd4\\u56de\\u6b63\\u786e\\u7684\\u9009\\u62e9\\u5668\\u8868\\u793a\\u63a5\\u6536\\u6210\\u529f\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n} \",\"keccak256\":\"0x51550871abdaa774e30e3d312dc2c31f7f3a451beeb0deffb6f04d9e7e08ba0c\",\"license\":\"GPL-3.0\"},\"contracts/BlindAuctionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport \\\"./BlindAuction.sol\\\";\\nimport \\\"./AuctionNFT.sol\\\";\\n\\n/// @title \\u76f2\\u62cd\\u5de5\\u5382\\u5408\\u7ea6\\n/// @notice \\u7528\\u4e8e\\u521b\\u5efa\\u548c\\u7ba1\\u7406\\u591a\\u4e2a\\u76f2\\u62cd\\u5408\\u7ea6\\uff0c\\u652f\\u6301NFT\\u94f8\\u9020\\u548c\\u4e8c\\u7ea7\\u5e02\\u573a\\ncontract BlindAuctionFactory {\\n    // NFT\\u5408\\u7ea6\\u5f15\\u7528\\n    AuctionNFT public nftContract;\\n    \\n    // \\u4e8b\\u4ef6\\uff1a\\u65b0\\u62cd\\u5356\\u5408\\u7ea6\\u521b\\u5efa\\n    event AuctionCreated(\\n        address indexed auctionAddress,\\n        address indexed beneficiary,\\n        uint biddingStart,\\n        uint biddingEnd,\\n        uint revealEnd,\\n        string metadata,\\n        uint256 nftTokenId\\n    );\\n    \\n    // \\u4e8b\\u4ef6\\uff1aNFT\\u91cd\\u65b0\\u62cd\\u5356\\n    event NFTResaleCreated(\\n        address indexed auctionAddress,\\n        address indexed seller,\\n        uint256 indexed nftTokenId,\\n        uint256 minPrice\\n    );\\n\\n    // \\u7528\\u6237\\u521b\\u5efa\\u7684\\u62cd\\u5356\\u5217\\u8868\\n    mapping(address => address[]) public userAuctions;\\n\\n    // \\u6240\\u6709\\u521b\\u5efa\\u7684\\u62cd\\u5356\\u5217\\u8868\\n    address[] public allAuctions;\\n    \\n    // NFT ID \\u5230\\u62cd\\u5356\\u5408\\u7ea6\\u7684\\u6620\\u5c04\\n    mapping(uint256 => address) public nftToAuction;\\n    \\n    constructor(address _nftContract) {\\n        nftContract = AuctionNFT(_nftContract);\\n    }\\n\\n    /// @notice \\u521b\\u5efaNFT\\u62cd\\u5356\\uff08\\u94f8\\u9020\\u65b0NFT\\u5e76\\u521b\\u5efa\\u62cd\\u5356\\uff09\\n    /// @param startTime \\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n    /// @param biddingTime \\u7ade\\u6807\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n    /// @param revealTime \\u62ab\\u9732\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n    /// @param metadata \\u62cd\\u5356\\u5143\\u6570\\u636e\\uff08JSON\\u5b57\\u7b26\\u4e32\\uff09\\n    /// @param nftMetadata NFT\\u5143\\u6570\\u636e\\n    /// @return auctionAddress \\u65b0\\u521b\\u5efa\\u7684\\u76f2\\u62cd\\u5408\\u7ea6\\u5730\\u5740\\n    /// @return nftTokenId \\u65b0\\u94f8\\u9020\\u7684NFT ID\\n    function createNFTAuction(\\n        uint startTime,\\n        uint biddingTime,\\n        uint revealTime,\\n        string memory metadata,\\n        NFTCreationData memory nftMetadata\\n    ) external returns (address auctionAddress, uint256 nftTokenId) {\\n        // \\u9996\\u5148\\u521b\\u5efa\\u65b0\\u7684\\u76f2\\u62cd\\u5408\\u7ea6\\uff08\\u4e34\\u65f6\\u4f7f\\u7528 nftTokenId = 0\\uff09\\n        BlindAuction newAuction = new BlindAuction(\\n            startTime,\\n            biddingTime,\\n            revealTime,\\n            payable(msg.sender),\\n            0, // \\u4e34\\u65f6\\u8bbe\\u7f6e\\uff0c\\u7a0d\\u540e\\u66f4\\u65b0\\n            address(nftContract)\\n        );\\n\\n        auctionAddress = address(newAuction);\\n\\n        // \\u7136\\u540e\\u94f8\\u9020NFT\\u76f4\\u63a5\\u7ed9\\u62cd\\u5356\\u5408\\u7ea6\\n        nftTokenId = nftContract.mintAuctionNFT(\\n            auctionAddress, // \\u76f4\\u63a5\\u94f8\\u9020\\u7ed9\\u62cd\\u5356\\u5408\\u7ea6\\n            nftMetadata.name,\\n            nftMetadata.description,\\n            nftMetadata.imageHash,\\n            nftMetadata.minPrice,\\n            nftMetadata.tokenURI\\n        );\\n        \\n        // \\u66f4\\u65b0\\u62cd\\u5356\\u5408\\u7ea6\\u4e2d\\u7684NFT ID\\n        newAuction.setNFTTokenId(nftTokenId);\\n        \\n        // \\u6807\\u8bb0NFT\\u5df2\\u8fdb\\u5165\\u62cd\\u5356\\n        nftContract.markAsAuctioned(nftTokenId, auctionAddress);\\n\\n        // \\u8bb0\\u5f55\\u7528\\u6237\\u521b\\u5efa\\u7684\\u62cd\\u5356\\n        userAuctions[msg.sender].push(auctionAddress);\\n\\n        // \\u6dfb\\u52a0\\u5230\\u6240\\u6709\\u62cd\\u5356\\u5217\\u8868\\n        allAuctions.push(auctionAddress);\\n        \\n        // \\u8bb0\\u5f55NFT\\u5230\\u62cd\\u5356\\u7684\\u6620\\u5c04\\n        nftToAuction[nftTokenId] = auctionAddress;\\n\\n        // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n        emit AuctionCreated(\\n            auctionAddress,\\n            msg.sender,\\n            startTime,\\n            startTime + biddingTime,\\n            startTime + biddingTime + revealTime,\\n            metadata,\\n            nftTokenId\\n        );\\n\\n        return (auctionAddress, nftTokenId);\\n    }\\n    \\n    /// @notice NFT\\u4e8c\\u7ea7\\u5e02\\u573a\\uff1a\\u91cd\\u65b0\\u62cd\\u5356\\u73b0\\u6709NFT\\n    /// @param nftTokenId NFT ID\\n    /// @param startTime \\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\n    /// @param biddingTime \\u7ade\\u6807\\u9636\\u6bb5\\u6301\\u7eed\\u65f6\\u95f4\\n    /// @param revealTime \\u62ab\\u9732\\u9636\\u6bb5\\u6301\\u7eed\\u65f6\\u95f4\\n    /// @param minPrice \\u6700\\u4f4e\\u51fa\\u4ef7\\n    /// @return auctionAddress \\u65b0\\u521b\\u5efa\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\n    function resellNFT(\\n        uint256 nftTokenId,\\n        uint startTime,\\n        uint biddingTime, \\n        uint revealTime,\\n        uint256 minPrice\\n    ) external returns (address auctionAddress) {\\n        // \\u9a8c\\u8bc1\\u8c03\\u7528\\u8005\\u662fNFT\\u6240\\u6709\\u8005\\n        require(nftContract.ownerOf(nftTokenId) == msg.sender, \\\"Not NFT owner\\\");\\n        \\n        // \\u521b\\u5efa\\u65b0\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\uff08\\u4e8c\\u6b21\\u9500\\u552e\\uff09\\n        BlindAuction newAuction = new BlindAuction(\\n            startTime,\\n            biddingTime,\\n            revealTime,\\n            payable(msg.sender), // \\u5f53\\u524dNFT\\u6240\\u6709\\u8005\\u4e3a\\u53d7\\u76ca\\u4eba\\n            nftTokenId,\\n            address(nftContract)\\n        );\\n        \\n        auctionAddress = address(newAuction);\\n        \\n        // \\u5c06NFT\\u8f6c\\u79fb\\u7ed9\\u62cd\\u5356\\u5408\\u7ea6\\u6258\\u7ba1\\n        nftContract.transferFrom(msg.sender, auctionAddress, nftTokenId);\\n        \\n        // \\u6807\\u8bb0NFT\\u5df2\\u62cd\\u5356\\u5e76\\u66f4\\u65b0\\u6700\\u4f4e\\u4ef7\\u683c\\n        nftContract.markAsAuctionedWithPrice(nftTokenId, auctionAddress, minPrice);\\n        \\n        // \\u8bb0\\u5f55\\u62cd\\u5356\\u4fe1\\u606f\\n        userAuctions[msg.sender].push(auctionAddress);\\n        allAuctions.push(auctionAddress);\\n        nftToAuction[nftTokenId] = auctionAddress;\\n        \\n        emit NFTResaleCreated(auctionAddress, msg.sender, nftTokenId, minPrice);\\n        \\n        return auctionAddress;\\n    }\\n\\n    /// @notice \\u521b\\u5efa\\u4f20\\u7edf\\u62cd\\u5356\\uff08\\u4e0d\\u94f8\\u9020NFT\\uff0c\\u5411\\u540e\\u517c\\u5bb9\\uff09\\n    /// @param startTime \\u7ade\\u6807\\u5f00\\u59cb\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n    /// @param biddingTime \\u7ade\\u6807\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n    /// @param revealTime \\u62ab\\u9732\\u9636\\u6bb5\\u7684\\u6301\\u7eed\\u65f6\\u95f4\\uff08\\u79d2\\uff09\\n    /// @param metadata \\u62cd\\u5356\\u7269\\u54c1\\u7684\\u5143\\u6570\\u636e\\uff08JSON\\u5b57\\u7b26\\u4e32\\uff09\\n    /// @return \\u65b0\\u521b\\u5efa\\u7684\\u76f2\\u62cd\\u5408\\u7ea6\\u5730\\u5740\\n    function createAuction(\\n        uint startTime,\\n        uint biddingTime,\\n        uint revealTime,\\n        string memory metadata\\n    ) external returns (address) {\\n        // \\u521b\\u5efa\\u65b0\\u7684\\u76f2\\u62cd\\u5408\\u7ea6\\uff08\\u4f20\\u7edf\\u6a21\\u5f0f\\uff0c\\u4e0d\\u6d89\\u53caNFT\\uff09\\n        BlindAuction newAuction = new BlindAuction(\\n            startTime,\\n            biddingTime,\\n            revealTime,\\n            payable(msg.sender),\\n            0, // nftTokenId = 0 \\u8868\\u793a\\u4f20\\u7edf\\u62cd\\u5356\\n            address(0) // \\u4e0d\\u4f7f\\u7528NFT\\u5408\\u7ea6\\n        );\\n\\n        address auctionAddress = address(newAuction);\\n\\n        // \\u8bb0\\u5f55\\u7528\\u6237\\u521b\\u5efa\\u7684\\u62cd\\u5356\\n        userAuctions[msg.sender].push(auctionAddress);\\n\\n        // \\u6dfb\\u52a0\\u5230\\u6240\\u6709\\u62cd\\u5356\\u5217\\u8868\\n        allAuctions.push(auctionAddress);\\n\\n        // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n        emit AuctionCreated(\\n            auctionAddress,\\n            msg.sender,\\n            startTime,\\n            startTime + biddingTime,\\n            startTime + biddingTime + revealTime,\\n            metadata,\\n            0 // \\u4f20\\u7edf\\u62cd\\u5356\\u6ca1\\u6709NFT\\n        );\\n\\n        return auctionAddress;\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709\\u62cd\\u5356\\n    /// @param user \\u7528\\u6237\\u5730\\u5740\\n    /// @return \\u8be5\\u7528\\u6237\\u521b\\u5efa\\u7684\\u6240\\u6709\\u76f2\\u62cd\\u5408\\u7ea6\\u5730\\u5740\\u6570\\u7ec4\\n    function getUserAuctions(address user) external view returns (address[] memory) {\\n        return userAuctions[user];\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u6240\\u6709\\u521b\\u5efa\\u7684\\u62cd\\u5356\\u6570\\u91cf\\n    /// @return \\u62cd\\u5356\\u603b\\u6570\\n    function getAuctionCount() external view returns (uint) {\\n        return allAuctions.length;\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u6240\\u6709\\u62cd\\u5356\\u5730\\u5740\\n    /// @param start \\u8d77\\u59cb\\u7d22\\u5f15\\n    /// @param count \\u83b7\\u53d6\\u6570\\u91cf\\n    /// @return \\u62cd\\u5356\\u5730\\u5740\\u6570\\u7ec4\\n    function getAuctions(uint256 start, uint256 count) external view returns (address[] memory) {\\n        // \\u5982\\u679c\\u6ca1\\u6709\\u62cd\\u5356\\uff0c\\u76f4\\u63a5\\u8fd4\\u56de\\u7a7a\\u6570\\u7ec4\\n        if (allAuctions.length == 0) {\\n            return new address[](0);\\n        }\\n        \\n        // \\u5982\\u679c\\u8d77\\u59cb\\u7d22\\u5f15\\u8d85\\u51fa\\u8303\\u56f4\\uff0c\\u8fd4\\u56de\\u7a7a\\u6570\\u7ec4\\n        if (start >= allAuctions.length) {\\n            return new address[](0);\\n        }\\n        \\n        uint256 end = start + count;\\n        if (end > allAuctions.length) {\\n            end = allAuctions.length;\\n        }\\n        \\n        address[] memory result = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = allAuctions[i];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /// @notice \\u83b7\\u53d6NFT\\u5bf9\\u5e94\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\n    /// @param nftTokenId NFT ID\\n    /// @return \\u62cd\\u5356\\u5408\\u7ea6\\u5730\\u5740\\n    function getNFTAuction(uint256 nftTokenId) external view returns (address) {\\n        return nftToAuction[nftTokenId];\\n    }\\n\\n    /// @notice \\u62cd\\u5356\\u7ed3\\u675f\\u901a\\u77e5\\u51fd\\u6570\\uff08\\u7531\\u62cd\\u5356\\u5408\\u7ea6\\u8c03\\u7528\\uff09\\n    /// @param nftTokenId NFT ID\\n    /// @param winner \\u62cd\\u5356\\u83b7\\u80dc\\u8005\\u5730\\u5740\\n    function notifyAuctionEnded(uint256 nftTokenId, address winner) external {\\n        // \\u9a8c\\u8bc1\\u8c03\\u7528\\u8005\\u662f\\u6709\\u6548\\u7684\\u62cd\\u5356\\u5408\\u7ea6\\n        require(nftToAuction[nftTokenId] == msg.sender, \\\"Invalid auction contract\\\");\\n        \\n        // \\u66f4\\u65b0NFT\\u72b6\\u6001\\u4e3a\\u4e0d\\u518d\\u62cd\\u5356\\n        nftContract.markAsNotAuctioned(nftTokenId, winner);\\n    }\\n}\\n\\n// NFT\\u521b\\u5efa\\u6570\\u636e\\u7ed3\\u6784\\nstruct NFTCreationData {\\n    string name;\\n    string description;\\n    string imageHash;\\n    uint256 minPrice;\\n    string tokenURI;\\n}\",\"keccak256\":\"0xf61aba3232b94c61ad4b227293f914e34fbfb253d8cd481f653c96fbbfd89587\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161262038038061262083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61258d806100936000396000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c8063b4fbe80a116200007a578063b4fbe80a14620001bb578063c44e664014620001d2578063ceb6a22f14620001e4578063d56d229d146200020a578063fdc40a50146200021e578063ff3ad0b4146200023557600080fd5b80630e17f44a14620000c857806315cda1af1462000111578063165c5881146200012857806338a97f97146200013f57806362c0dd27146200016b5780638f5bf37d1462000184575b600080fd5b620000f4620000d936600462000d31565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000f46200012236600462000dbb565b6200024c565b620000f46200013936600462000d31565b6200037d565b620000f46200015036600462000d31565b6000908152600360205260409020546001600160a01b031690565b620001826200017c36600462000d65565b620003a8565b005b6200019b6200019536600462000e19565b62000480565b604080516001600160a01b03909316835260208301919091520162000108565b620000f4620001cc36600462000d02565b62000745565b60025460405190815260200162000108565b620001fb620001f536600462000d98565b6200077e565b60405162000108919062001059565b600054620000f4906001600160a01b031681565b620000f46200022f36600462000f54565b620008d6565b620001fb6200024636600462000cbb565b62000ba0565b60008085858533600080604051620002649062000c18565b6200027596959493929190620010a8565b604051809103906000f08015801562000292573d6000803e3d6000fd5b503360008181526001602081815260408320805480840182559084529083200180546001600160a01b0386166001600160a01b031991821681179092556002805493840181559093527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054909216811790915591925082917f57cd66c51c792c23481870e9e9a53acc9f3b0ac50ec3ecb2976ad302c358eb88896200033c8a8262001144565b89620003498c8e62001144565b62000355919062001144565b8960006040516200036b959493929190620010df565b60405180910390a39695505050505050565b600281815481106200038e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000828152600360205260409020546001600160a01b03163314620004145760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e20636f6e7472616374000000000000000060448201526064015b60405180910390fd5b600054604051637d47a19760e01b8152600481018490526001600160a01b03838116602483015290911690637d47a19790604401600060405180830381600087803b1580156200046357600080fd5b505af115801562000478573d6000803e3d6000fd5b505050505050565b60008060008787873360008060009054906101000a90046001600160a01b0316604051620004ae9062000c18565b620004bf96959493929190620010a8565b604051809103906000f080158015620004dc573d6000803e3d6000fd5b506000548551602087015160408089015160608a015160808b0151925163a223f7ef60e01b81529699508997506001600160a01b039095169563a223f7ef9562000530958995909490939260040162000fe0565b602060405180830381600087803b1580156200054b57600080fd5b505af115801562000560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000586919062000d4b565b604051637c0fdd2960e01b8152600481018290529092506001600160a01b03821690637c0fdd2990602401600060405180830381600087803b158015620005cc57600080fd5b505af1158015620005e1573d6000803e3d6000fd5b5050600054604051634d9615dd60e11b8152600481018690526001600160a01b0387811660248301529091169250639b2c2bba9150604401600060405180830381600087803b1580156200063457600080fd5b505af115801562000649573d6000803e3d6000fd5b5050336000818152600160208181526040808420805480850182559085528285200180546001600160a01b038c166001600160a01b031991821681179092556002805495860190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9094018054851682179055898552600390925290922080549091168217905590925090507f57cd66c51c792c23481870e9e9a53acc9f3b0ac50ec3ecb2976ad302c358eb888a620007048b8262001144565b8a620007118d8f62001144565b6200071d919062001144565b8a8860405162000732959493929190620010df565b60405180910390a3509550959350505050565b600160205281600052604060002081815481106200076257600080fd5b6000918252602090912001546001600160a01b03169150829050565b600254606090620007bf5760005b604051908082528060200260200182016040528015620007b6578160200160208202803683370190505b509050620008d0565b6002548310620007d15760006200078c565b6000620007df838562001144565b600254909150811115620007f257506002545b60006200080085836200115f565b67ffffffffffffffff8111156200081b576200081b620011c3565b60405190808252806020026020018201604052801562000845578160200160208202803683370190505b509050845b82811015620008cb5760028181548110620008695762000869620011ad565b6000918252602090912001546001600160a01b0316826200088b88846200115f565b815181106200089e576200089e620011ad565b6001600160a01b039092166020928302919091019091015280620008c28162001179565b9150506200084a565b509150505b92915050565b600080546040516331a9108f60e11b81526004810188905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156200091c57600080fd5b505afa15801562000931573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000957919062000ce2565b6001600160a01b0316146200099f5760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b60448201526064016200040b565b6000858585338a60008054906101000a90046001600160a01b0316604051620009c89062000c18565b620009d996959493929190620010a8565b604051809103906000f080158015620009f6573d6000803e3d6000fd5b506000546040516323b872dd60e01b81523360048201526001600160a01b038084166024830152604482018b90529294508493509116906323b872dd90606401600060405180830381600087803b15801562000a5157600080fd5b505af115801562000a66573d6000803e3d6000fd5b5050600054604051634e58019160e11b8152600481018b90526001600160a01b038681166024830152604482018890529091169250639cb003229150606401600060405180830381600087803b15801562000ac057600080fd5b505af115801562000ad5573d6000803e3d6000fd5b5050336000818152600160208181526040808420805480850182559085528285200180546001600160a01b038b166001600160a01b031991821681179092556002805495860190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180548516821790558e855260038352938190208054909316841790925590518881528c955092935090917f1b382bba1a2ce7d34365a4ef9b1e25416c03fcec29444362a0d5620eb1466015910160405180910390a45095945050505050565b6001600160a01b03811660009081526001602090815260409182902080548351818402810184019094528084526060939283018282801562000c0c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000bed575b50505050509050919050565b61136580620011f383390190565b600082601f83011262000c3857600080fd5b813567ffffffffffffffff8082111562000c565762000c56620011c3565b604051601f8301601f19908116603f0116810190828211818310171562000c815762000c81620011c3565b8160405283815286602085880101111562000c9b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121562000cce57600080fd5b813562000cdb81620011d9565b9392505050565b60006020828403121562000cf557600080fd5b815162000cdb81620011d9565b6000806040838503121562000d1657600080fd5b823562000d2381620011d9565b946020939093013593505050565b60006020828403121562000d4457600080fd5b5035919050565b60006020828403121562000d5e57600080fd5b5051919050565b6000806040838503121562000d7957600080fd5b82359150602083013562000d8d81620011d9565b809150509250929050565b6000806040838503121562000dac57600080fd5b50508035926020909101359150565b6000806000806080858703121562000dd257600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111562000dff57600080fd5b62000e0d8782880162000c26565b91505092959194509250565b600080600080600060a0868803121562000e3257600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111562000e6057600080fd5b62000e6e89838a0162000c26565b9350608088013591508082111562000e8557600080fd5b9087019060a0828a03121562000e9a57600080fd5b62000ea462001118565b82358281111562000eb457600080fd5b62000ec28b82860162000c26565b82525060208301358281111562000ed857600080fd5b62000ee68b82860162000c26565b60208301525060408301358281111562000eff57600080fd5b62000f0d8b82860162000c26565b6040830152506060830135606082015260808301358281111562000f3057600080fd5b62000f3e8b82860162000c26565b6080830152508093505050509295509295909350565b600080600080600060a0868803121562000f6d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260005b8181101562000fb85760208185018101518683018201520162000f9a565b8181111562000fcb576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038716815260c060208201819052600090620010069083018862000f90565b82810360408401526200101a818862000f90565b9050828103606084015262001030818762000f90565b905084608084015282810360a08401526200104c818562000f90565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156200109c5783516001600160a01b03168352928401929184019160010162001075565b50909695505050505050565b958652602086019490945260408501929092526001600160a01b03908116606085015260808401919091521660a082015260c00190565b85815284602082015283604082015260a0606082015260006200110660a083018562000f90565b90508260808301529695505050505050565b60405160a0810167ffffffffffffffff811182821017156200113e576200113e620011c3565b60405290565b600082198211156200115a576200115a62001197565b500190565b60008282101562001174576200117462001197565b500390565b600060001982141562001190576200119062001197565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620011ef57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001365380380620013658339810160408190526200003491620000de565b600080546001600160a01b0319166001600160a01b038516179055600186905562000060858762000142565b60028190556200007290859062000142565b600355600b80546001600160a01b031916331790556009829055600a8054600160a01b841515810260ff60a01b199092169190911791829055900460ff1615620000d257600a80546001600160a01b0319166001600160a01b0383161790555b50505050505062000182565b60008060008060008060c08789031215620000f857600080fd5b86519550602087015194506040870151935060608701516200011a8162000169565b608088015160a08901519194509250620001348162000169565b809150509295509295509295565b600082198211156200016457634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146200017f57600080fd5b50565b6111d380620001926000396000f3fe60806040526004361061014b5760003560e01c80637e830574116100b6578063c45a01551161006f578063c45a0155146103bc578063d56d229d146103dc578063d57bde79146103fc578063e75f480c14610412578063e8f9009a14610427578063fc519f151461045d57600080fd5b80637e83057414610328578063900f080a1461033e57806391f901571461035e5780639528d4e91461037e578063957bb1e014610393578063a6e66477146103a657600080fd5b806338af3eed1161010857806338af3eed146102555780633ccfd60b1461028d578063423b217f146102a25780634d21e019146102b857806351dcb1c3146102f35780637c0fdd291461030857600080fd5b806301495c1c146101505780630162d12e1461018a578063022a6fae146101bb57806312fa6feb146101df578063150b7a02146101f95780632a24f46c1461023e575b600080fd5b34801561015c57600080fd5b5061017061016b366004610fda565b610472565b604080519283526020830191909152015b60405180910390f35b34801561019657600080fd5b50600a546101ab90600160a01b900460ff1681565b6040519015158152602001610181565b3480156101c757600080fd5b506101d160015481565b604051908152602001610181565b3480156101eb57600080fd5b506004546101ab9060ff1681565b34801561020557600080fd5b50610225610214366004610f3b565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610181565b34801561024a57600080fd5b506102536104ae565b005b34801561026157600080fd5b50600054610275906001600160a01b031681565b6040516001600160a01b039091168152602001610181565b34801561029957600080fd5b5061025361081b565b3480156102ae57600080fd5b506101d160025481565b3480156102c457600080fd5b506102cd61086c565b60408051931515845260208401929092526001600160a01b031690820152606001610181565b3480156102ff57600080fd5b506101d161091e565b34801561031457600080fd5b506102536103233660046110c2565b610951565b34801561033457600080fd5b506101d160095481565b34801561034a57600080fd5b50610253610359366004611006565b6109d6565b34801561036a57600080fd5b50600654610275906001600160a01b031681565b34801561038a57600080fd5b506101d1610ce5565b6102536103a13660046110c2565b610d04565b3480156103b257600080fd5b506101d160035481565b3480156103c857600080fd5b50600b54610275906001600160a01b031681565b3480156103e857600080fd5b50600a54610275906001600160a01b031681565b34801561040857600080fd5b506101d160075481565b34801561041e57600080fd5b506101d1610dd6565b34801561043357600080fd5b506101d1610442366004610efa565b6001600160a01b031660009081526005602052604090205490565b34801561046957600080fd5b506101d1610df5565b6005602052816000526040600020818154811061048e57600080fd5b600091825260209091206002909102018054600190910154909250905082565b6003548042116104d957604051630a8d68c960e21b8152600481018290526024015b60405180910390fd5b60045460ff16156104fd57604051630c39fb9f60e31b815260040160405180910390fd5b600654600754600954604080516001600160a01b039094168452602084019290925282820152517fc358e8e3f205b5e7453abd5cbac388ca4552b887b69001bc972b88610c7490359181900360600190a16004805460ff19166001179055600a54600160a01b900460ff16801561057e57506006546001600160a01b031615155b156106a557600a546006546009546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b50506006546009546040516001600160a01b039092169350309250907f67043fac5fd2bf9edbb46ee495aaed7f97f91d43507d373be2b592af19b8c0a890600090a4600b546009546006546040516362c0dd2760e01b815260048101929092526001600160a01b039081166024830152909116906362c0dd2790604401600060405180830381600087803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b505050506107d3565b600a54600160a01b900460ff16156107d357600a546000546009546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b5050600080546009546040516001600160a01b039092169450309350917f67043fac5fd2bf9edbb46ee495aaed7f97f91d43507d373be2b592af19b8c0a891a4600b546009546000546040516362c0dd2760e01b815260048101929092526001600160a01b039081166024830152909116906362c0dd2790604401600060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b505050505b6007541561081857600080546007546040516001600160a01b039092169281156108fc029290818181858888f19350505050158015610816573d6000803e3d6000fd5b505b50565b33600090815260086020526040902054801561081857336000818152600860205260408082208290555183156108fc0291849190818181858888f19350505050158015610816573d6000803e3d6000fd5b600a54600954600160a01b90910460ff16906000821561091657600a546009546040516331a9108f60e11b81526001600160a01b0390921691636352211e916108bb9160040190815260200190565b60206040518083038186803b1580156108d357600080fd5b505afa925050508015610903575060408051601f3d908101601f1916820190925261090091810190610f1e565b60015b61090f57506000909192565b9050909192565b506000909192565b6000600254421161092f5750600090565b600354421061093e5750600090565b4260035461094c919061112a565b905090565b600b546001600160a01b031633146109b55760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920666163746f72792063616e20736574204e465420746f6b656e20496044820152601160fa1b60648201526084016104d0565b6009819055600a805460ff60a01b1916911515600160a01b02919091179055565b6002548042116109fc57604051630a8d68c960e21b8152600481018290526024016104d0565b600354804210610a225760405163348f2b4160e11b8152600481018290526024016104d0565b33600090815260056020526040902054878114610a515760405162461bcd60e51b81526004016104d0906110db565b858114610a705760405162461bcd60e51b81526004016104d0906110db565b838114610a8f5760405162461bcd60e51b81526004016104d0906110db565b6000805b82811015610cad57336000908152600560205260408120805483908110610abc57610abc611172565b9060005260206000209060020201905060008060008e8e86818110610ae357610ae3611172565b905060200201358d8d87818110610afc57610afc611172565b9050602002016020810190610b1191906110a0565b8c8c88818110610b2357610b23611172565b90506020020135925092509250828282604051602001610b599392919092835290151560f81b6020830152602182015260410190565b60405160208183030381529060405280519060200120846000015414610b825750505050610c9b565b6001840154610b919087611112565b955081158015610ba5575082846001015410155b15610c5157610bb43384610e2d565b15610c1057610bc3838761112a565b60408051338152602081018690526001918101919091529096507f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532906060015b60405180910390a1610c92565b60408051338152602081018590526000918101919091527f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe5953290606001610c03565b604080513381526000602082018190528183015290517f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe595329181900360600190a15b50506000909155505b80610ca581611141565b915050610a93565b508015610cd9573360009081526008602052604081208054839290610cd3908490611112565b90915550505b50505050505050505050565b60006001544210610cf65750600090565b4260015461094c919061112a565b600154804211610d2a57604051630a8d68c960e21b8152600481018290526024016104d0565b600254804210610d505760405163348f2b4160e11b8152600481018290526024016104d0565b33600081815260056020908152604080832081518083018352888152348185018181528354600180820186559488529686902092516002909702909201958655905194909101939093558051938452908301919091527f0862512267aa2317caa9475b7e771425e6b897509aade0be0d8fc6f5ce5fdd18910160405180910390a1505050565b60006002544210610de75750600090565b4260025461094c919061112a565b6000600154421015610e075750600090565b600254421015610e175750600190565b600354421015610e275750600290565b50600390565b60006007548211610e4057506000610ea8565b6006546001600160a01b031615610e84576007546006546001600160a01b031660009081526008602052604081208054909190610e7e908490611112565b90915550505b506007819055600680546001600160a01b0319166001600160a01b03841617905560015b92915050565b60008083601f840112610ec057600080fd5b50813567ffffffffffffffff811115610ed857600080fd5b6020830191508360208260051b8501011115610ef357600080fd5b9250929050565b600060208284031215610f0c57600080fd5b8135610f1781611188565b9392505050565b600060208284031215610f3057600080fd5b8151610f1781611188565b600080600080600060808688031215610f5357600080fd5b8535610f5e81611188565b94506020860135610f6e81611188565b935060408601359250606086013567ffffffffffffffff80821115610f9257600080fd5b818801915088601f830112610fa657600080fd5b813581811115610fb557600080fd5b896020828501011115610fc757600080fd5b9699959850939650602001949392505050565b60008060408385031215610fed57600080fd5b8235610ff881611188565b946020939093013593505050565b6000806000806000806060878903121561101f57600080fd5b863567ffffffffffffffff8082111561103757600080fd5b6110438a838b01610eae565b9098509650602089013591508082111561105c57600080fd5b6110688a838b01610eae565b9096509450604089013591508082111561108157600080fd5b5061108e89828a01610eae565b979a9699509497509295939492505050565b6000602082840312156110b257600080fd5b81358015158114610f1757600080fd5b6000602082840312156110d457600080fd5b5035919050565b6020808252601a908201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604082015260600190565b600082198211156111255761112561115c565b500190565b60008282101561113c5761113c61115c565b500390565b60006000198214156111555761115561115c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461081857600080fdfea2646970667358221220f9d36b40774b14694e12ca2b10e662b4f190545f22fa44d32a364399b2de3ba364736f6c63430008050033a26469706673582212209d9515d92b62ead88a5d99126fff1c404f9a0728642386ef6bd8efde6f22227464736f6c63430008050033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c35760003560e01c8063b4fbe80a116200007a578063b4fbe80a14620001bb578063c44e664014620001d2578063ceb6a22f14620001e4578063d56d229d146200020a578063fdc40a50146200021e578063ff3ad0b4146200023557600080fd5b80630e17f44a14620000c857806315cda1af1462000111578063165c5881146200012857806338a97f97146200013f57806362c0dd27146200016b5780638f5bf37d1462000184575b600080fd5b620000f4620000d936600462000d31565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000f46200012236600462000dbb565b6200024c565b620000f46200013936600462000d31565b6200037d565b620000f46200015036600462000d31565b6000908152600360205260409020546001600160a01b031690565b620001826200017c36600462000d65565b620003a8565b005b6200019b6200019536600462000e19565b62000480565b604080516001600160a01b03909316835260208301919091520162000108565b620000f4620001cc36600462000d02565b62000745565b60025460405190815260200162000108565b620001fb620001f536600462000d98565b6200077e565b60405162000108919062001059565b600054620000f4906001600160a01b031681565b620000f46200022f36600462000f54565b620008d6565b620001fb6200024636600462000cbb565b62000ba0565b60008085858533600080604051620002649062000c18565b6200027596959493929190620010a8565b604051809103906000f08015801562000292573d6000803e3d6000fd5b503360008181526001602081815260408320805480840182559084529083200180546001600160a01b0386166001600160a01b031991821681179092556002805493840181559093527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054909216811790915591925082917f57cd66c51c792c23481870e9e9a53acc9f3b0ac50ec3ecb2976ad302c358eb88896200033c8a8262001144565b89620003498c8e62001144565b62000355919062001144565b8960006040516200036b959493929190620010df565b60405180910390a39695505050505050565b600281815481106200038e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000828152600360205260409020546001600160a01b03163314620004145760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e20636f6e7472616374000000000000000060448201526064015b60405180910390fd5b600054604051637d47a19760e01b8152600481018490526001600160a01b03838116602483015290911690637d47a19790604401600060405180830381600087803b1580156200046357600080fd5b505af115801562000478573d6000803e3d6000fd5b505050505050565b60008060008787873360008060009054906101000a90046001600160a01b0316604051620004ae9062000c18565b620004bf96959493929190620010a8565b604051809103906000f080158015620004dc573d6000803e3d6000fd5b506000548551602087015160408089015160608a015160808b0151925163a223f7ef60e01b81529699508997506001600160a01b039095169563a223f7ef9562000530958995909490939260040162000fe0565b602060405180830381600087803b1580156200054b57600080fd5b505af115801562000560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000586919062000d4b565b604051637c0fdd2960e01b8152600481018290529092506001600160a01b03821690637c0fdd2990602401600060405180830381600087803b158015620005cc57600080fd5b505af1158015620005e1573d6000803e3d6000fd5b5050600054604051634d9615dd60e11b8152600481018690526001600160a01b0387811660248301529091169250639b2c2bba9150604401600060405180830381600087803b1580156200063457600080fd5b505af115801562000649573d6000803e3d6000fd5b5050336000818152600160208181526040808420805480850182559085528285200180546001600160a01b038c166001600160a01b031991821681179092556002805495860190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9094018054851682179055898552600390925290922080549091168217905590925090507f57cd66c51c792c23481870e9e9a53acc9f3b0ac50ec3ecb2976ad302c358eb888a620007048b8262001144565b8a620007118d8f62001144565b6200071d919062001144565b8a8860405162000732959493929190620010df565b60405180910390a3509550959350505050565b600160205281600052604060002081815481106200076257600080fd5b6000918252602090912001546001600160a01b03169150829050565b600254606090620007bf5760005b604051908082528060200260200182016040528015620007b6578160200160208202803683370190505b509050620008d0565b6002548310620007d15760006200078c565b6000620007df838562001144565b600254909150811115620007f257506002545b60006200080085836200115f565b67ffffffffffffffff8111156200081b576200081b620011c3565b60405190808252806020026020018201604052801562000845578160200160208202803683370190505b509050845b82811015620008cb5760028181548110620008695762000869620011ad565b6000918252602090912001546001600160a01b0316826200088b88846200115f565b815181106200089e576200089e620011ad565b6001600160a01b039092166020928302919091019091015280620008c28162001179565b9150506200084a565b509150505b92915050565b600080546040516331a9108f60e11b81526004810188905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156200091c57600080fd5b505afa15801562000931573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000957919062000ce2565b6001600160a01b0316146200099f5760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b60448201526064016200040b565b6000858585338a60008054906101000a90046001600160a01b0316604051620009c89062000c18565b620009d996959493929190620010a8565b604051809103906000f080158015620009f6573d6000803e3d6000fd5b506000546040516323b872dd60e01b81523360048201526001600160a01b038084166024830152604482018b90529294508493509116906323b872dd90606401600060405180830381600087803b15801562000a5157600080fd5b505af115801562000a66573d6000803e3d6000fd5b5050600054604051634e58019160e11b8152600481018b90526001600160a01b038681166024830152604482018890529091169250639cb003229150606401600060405180830381600087803b15801562000ac057600080fd5b505af115801562000ad5573d6000803e3d6000fd5b5050336000818152600160208181526040808420805480850182559085528285200180546001600160a01b038b166001600160a01b031991821681179092556002805495860190557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180548516821790558e855260038352938190208054909316841790925590518881528c955092935090917f1b382bba1a2ce7d34365a4ef9b1e25416c03fcec29444362a0d5620eb1466015910160405180910390a45095945050505050565b6001600160a01b03811660009081526001602090815260409182902080548351818402810184019094528084526060939283018282801562000c0c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000bed575b50505050509050919050565b61136580620011f383390190565b600082601f83011262000c3857600080fd5b813567ffffffffffffffff8082111562000c565762000c56620011c3565b604051601f8301601f19908116603f0116810190828211818310171562000c815762000c81620011c3565b8160405283815286602085880101111562000c9b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121562000cce57600080fd5b813562000cdb81620011d9565b9392505050565b60006020828403121562000cf557600080fd5b815162000cdb81620011d9565b6000806040838503121562000d1657600080fd5b823562000d2381620011d9565b946020939093013593505050565b60006020828403121562000d4457600080fd5b5035919050565b60006020828403121562000d5e57600080fd5b5051919050565b6000806040838503121562000d7957600080fd5b82359150602083013562000d8d81620011d9565b809150509250929050565b6000806040838503121562000dac57600080fd5b50508035926020909101359150565b6000806000806080858703121562000dd257600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111562000dff57600080fd5b62000e0d8782880162000c26565b91505092959194509250565b600080600080600060a0868803121562000e3257600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111562000e6057600080fd5b62000e6e89838a0162000c26565b9350608088013591508082111562000e8557600080fd5b9087019060a0828a03121562000e9a57600080fd5b62000ea462001118565b82358281111562000eb457600080fd5b62000ec28b82860162000c26565b82525060208301358281111562000ed857600080fd5b62000ee68b82860162000c26565b60208301525060408301358281111562000eff57600080fd5b62000f0d8b82860162000c26565b6040830152506060830135606082015260808301358281111562000f3057600080fd5b62000f3e8b82860162000c26565b6080830152508093505050509295509295909350565b600080600080600060a0868803121562000f6d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260005b8181101562000fb85760208185018101518683018201520162000f9a565b8181111562000fcb576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038716815260c060208201819052600090620010069083018862000f90565b82810360408401526200101a818862000f90565b9050828103606084015262001030818762000f90565b905084608084015282810360a08401526200104c818562000f90565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156200109c5783516001600160a01b03168352928401929184019160010162001075565b50909695505050505050565b958652602086019490945260408501929092526001600160a01b03908116606085015260808401919091521660a082015260c00190565b85815284602082015283604082015260a0606082015260006200110660a083018562000f90565b90508260808301529695505050505050565b60405160a0810167ffffffffffffffff811182821017156200113e576200113e620011c3565b60405290565b600082198211156200115a576200115a62001197565b500190565b60008282101562001174576200117462001197565b500390565b600060001982141562001190576200119062001197565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620011ef57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001365380380620013658339810160408190526200003491620000de565b600080546001600160a01b0319166001600160a01b038516179055600186905562000060858762000142565b60028190556200007290859062000142565b600355600b80546001600160a01b031916331790556009829055600a8054600160a01b841515810260ff60a01b199092169190911791829055900460ff1615620000d257600a80546001600160a01b0319166001600160a01b0383161790555b50505050505062000182565b60008060008060008060c08789031215620000f857600080fd5b86519550602087015194506040870151935060608701516200011a8162000169565b608088015160a08901519194509250620001348162000169565b809150509295509295509295565b600082198211156200016457634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146200017f57600080fd5b50565b6111d380620001926000396000f3fe60806040526004361061014b5760003560e01c80637e830574116100b6578063c45a01551161006f578063c45a0155146103bc578063d56d229d146103dc578063d57bde79146103fc578063e75f480c14610412578063e8f9009a14610427578063fc519f151461045d57600080fd5b80637e83057414610328578063900f080a1461033e57806391f901571461035e5780639528d4e91461037e578063957bb1e014610393578063a6e66477146103a657600080fd5b806338af3eed1161010857806338af3eed146102555780633ccfd60b1461028d578063423b217f146102a25780634d21e019146102b857806351dcb1c3146102f35780637c0fdd291461030857600080fd5b806301495c1c146101505780630162d12e1461018a578063022a6fae146101bb57806312fa6feb146101df578063150b7a02146101f95780632a24f46c1461023e575b600080fd5b34801561015c57600080fd5b5061017061016b366004610fda565b610472565b604080519283526020830191909152015b60405180910390f35b34801561019657600080fd5b50600a546101ab90600160a01b900460ff1681565b6040519015158152602001610181565b3480156101c757600080fd5b506101d160015481565b604051908152602001610181565b3480156101eb57600080fd5b506004546101ab9060ff1681565b34801561020557600080fd5b50610225610214366004610f3b565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610181565b34801561024a57600080fd5b506102536104ae565b005b34801561026157600080fd5b50600054610275906001600160a01b031681565b6040516001600160a01b039091168152602001610181565b34801561029957600080fd5b5061025361081b565b3480156102ae57600080fd5b506101d160025481565b3480156102c457600080fd5b506102cd61086c565b60408051931515845260208401929092526001600160a01b031690820152606001610181565b3480156102ff57600080fd5b506101d161091e565b34801561031457600080fd5b506102536103233660046110c2565b610951565b34801561033457600080fd5b506101d160095481565b34801561034a57600080fd5b50610253610359366004611006565b6109d6565b34801561036a57600080fd5b50600654610275906001600160a01b031681565b34801561038a57600080fd5b506101d1610ce5565b6102536103a13660046110c2565b610d04565b3480156103b257600080fd5b506101d160035481565b3480156103c857600080fd5b50600b54610275906001600160a01b031681565b3480156103e857600080fd5b50600a54610275906001600160a01b031681565b34801561040857600080fd5b506101d160075481565b34801561041e57600080fd5b506101d1610dd6565b34801561043357600080fd5b506101d1610442366004610efa565b6001600160a01b031660009081526005602052604090205490565b34801561046957600080fd5b506101d1610df5565b6005602052816000526040600020818154811061048e57600080fd5b600091825260209091206002909102018054600190910154909250905082565b6003548042116104d957604051630a8d68c960e21b8152600481018290526024015b60405180910390fd5b60045460ff16156104fd57604051630c39fb9f60e31b815260040160405180910390fd5b600654600754600954604080516001600160a01b039094168452602084019290925282820152517fc358e8e3f205b5e7453abd5cbac388ca4552b887b69001bc972b88610c7490359181900360600190a16004805460ff19166001179055600a54600160a01b900460ff16801561057e57506006546001600160a01b031615155b156106a557600a546006546009546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b1580156105dd57600080fd5b505af11580156105f1573d6000803e3d6000fd5b50506006546009546040516001600160a01b039092169350309250907f67043fac5fd2bf9edbb46ee495aaed7f97f91d43507d373be2b592af19b8c0a890600090a4600b546009546006546040516362c0dd2760e01b815260048101929092526001600160a01b039081166024830152909116906362c0dd2790604401600060405180830381600087803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b505050506107d3565b600a54600160a01b900460ff16156107d357600a546000546009546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b5050600080546009546040516001600160a01b039092169450309350917f67043fac5fd2bf9edbb46ee495aaed7f97f91d43507d373be2b592af19b8c0a891a4600b546009546000546040516362c0dd2760e01b815260048101929092526001600160a01b039081166024830152909116906362c0dd2790604401600060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b505050505b6007541561081857600080546007546040516001600160a01b039092169281156108fc029290818181858888f19350505050158015610816573d6000803e3d6000fd5b505b50565b33600090815260086020526040902054801561081857336000818152600860205260408082208290555183156108fc0291849190818181858888f19350505050158015610816573d6000803e3d6000fd5b600a54600954600160a01b90910460ff16906000821561091657600a546009546040516331a9108f60e11b81526001600160a01b0390921691636352211e916108bb9160040190815260200190565b60206040518083038186803b1580156108d357600080fd5b505afa925050508015610903575060408051601f3d908101601f1916820190925261090091810190610f1e565b60015b61090f57506000909192565b9050909192565b506000909192565b6000600254421161092f5750600090565b600354421061093e5750600090565b4260035461094c919061112a565b905090565b600b546001600160a01b031633146109b55760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920666163746f72792063616e20736574204e465420746f6b656e20496044820152601160fa1b60648201526084016104d0565b6009819055600a805460ff60a01b1916911515600160a01b02919091179055565b6002548042116109fc57604051630a8d68c960e21b8152600481018290526024016104d0565b600354804210610a225760405163348f2b4160e11b8152600481018290526024016104d0565b33600090815260056020526040902054878114610a515760405162461bcd60e51b81526004016104d0906110db565b858114610a705760405162461bcd60e51b81526004016104d0906110db565b838114610a8f5760405162461bcd60e51b81526004016104d0906110db565b6000805b82811015610cad57336000908152600560205260408120805483908110610abc57610abc611172565b9060005260206000209060020201905060008060008e8e86818110610ae357610ae3611172565b905060200201358d8d87818110610afc57610afc611172565b9050602002016020810190610b1191906110a0565b8c8c88818110610b2357610b23611172565b90506020020135925092509250828282604051602001610b599392919092835290151560f81b6020830152602182015260410190565b60405160208183030381529060405280519060200120846000015414610b825750505050610c9b565b6001840154610b919087611112565b955081158015610ba5575082846001015410155b15610c5157610bb43384610e2d565b15610c1057610bc3838761112a565b60408051338152602081018690526001918101919091529096507f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532906060015b60405180910390a1610c92565b60408051338152602081018590526000918101919091527f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe5953290606001610c03565b604080513381526000602082018190528183015290517f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe595329181900360600190a15b50506000909155505b80610ca581611141565b915050610a93565b508015610cd9573360009081526008602052604081208054839290610cd3908490611112565b90915550505b50505050505050505050565b60006001544210610cf65750600090565b4260015461094c919061112a565b600154804211610d2a57604051630a8d68c960e21b8152600481018290526024016104d0565b600254804210610d505760405163348f2b4160e11b8152600481018290526024016104d0565b33600081815260056020908152604080832081518083018352888152348185018181528354600180820186559488529686902092516002909702909201958655905194909101939093558051938452908301919091527f0862512267aa2317caa9475b7e771425e6b897509aade0be0d8fc6f5ce5fdd18910160405180910390a1505050565b60006002544210610de75750600090565b4260025461094c919061112a565b6000600154421015610e075750600090565b600254421015610e175750600190565b600354421015610e275750600290565b50600390565b60006007548211610e4057506000610ea8565b6006546001600160a01b031615610e84576007546006546001600160a01b031660009081526008602052604081208054909190610e7e908490611112565b90915550505b506007819055600680546001600160a01b0319166001600160a01b03841617905560015b92915050565b60008083601f840112610ec057600080fd5b50813567ffffffffffffffff811115610ed857600080fd5b6020830191508360208260051b8501011115610ef357600080fd5b9250929050565b600060208284031215610f0c57600080fd5b8135610f1781611188565b9392505050565b600060208284031215610f3057600080fd5b8151610f1781611188565b600080600080600060808688031215610f5357600080fd5b8535610f5e81611188565b94506020860135610f6e81611188565b935060408601359250606086013567ffffffffffffffff80821115610f9257600080fd5b818801915088601f830112610fa657600080fd5b813581811115610fb557600080fd5b896020828501011115610fc757600080fd5b9699959850939650602001949392505050565b60008060408385031215610fed57600080fd5b8235610ff881611188565b946020939093013593505050565b6000806000806000806060878903121561101f57600080fd5b863567ffffffffffffffff8082111561103757600080fd5b6110438a838b01610eae565b9098509650602089013591508082111561105c57600080fd5b6110688a838b01610eae565b9096509450604089013591508082111561108157600080fd5b5061108e89828a01610eae565b979a9699509497509295939492505050565b6000602082840312156110b257600080fd5b81358015158114610f1757600080fd5b6000602082840312156110d457600080fd5b5035919050565b6020808252601a908201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604082015260600190565b600082198211156111255761112561115c565b500190565b60008282101561113c5761113c61115c565b500390565b60006000198214156111555761115561115c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461081857600080fdfea2646970667358221220f9d36b40774b14694e12ca2b10e662b4f190545f22fa44d32a364399b2de3ba364736f6c63430008050033a26469706673582212209d9515d92b62ead88a5d99126fff1c404f9a0728642386ef6bd8efde6f22227464736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createAuction(uint256,uint256,uint256,string)": {
        "params": {
          "biddingTime": "竞标阶段的持续时间（秒）",
          "metadata": "拍卖物品的元数据（JSON字符串）",
          "revealTime": "披露阶段的持续时间（秒）",
          "startTime": "竞标开始时间（时间戳）"
        },
        "returns": {
          "_0": "新创建的盲拍合约地址"
        }
      },
      "createNFTAuction(uint256,uint256,uint256,string,(string,string,string,uint256,string))": {
        "params": {
          "biddingTime": "竞标阶段的持续时间（秒）",
          "metadata": "拍卖元数据（JSON字符串）",
          "nftMetadata": "NFT元数据",
          "revealTime": "披露阶段的持续时间（秒）",
          "startTime": "竞标开始时间（时间戳）"
        },
        "returns": {
          "auctionAddress": "新创建的盲拍合约地址",
          "nftTokenId": "新铸造的NFT ID"
        }
      },
      "getAuctionCount()": {
        "returns": {
          "_0": "拍卖总数"
        }
      },
      "getAuctions(uint256,uint256)": {
        "params": {
          "count": "获取数量",
          "start": "起始索引"
        },
        "returns": {
          "_0": "拍卖地址数组"
        }
      },
      "getNFTAuction(uint256)": {
        "params": {
          "nftTokenId": "NFT ID"
        },
        "returns": {
          "_0": "拍卖合约地址"
        }
      },
      "getUserAuctions(address)": {
        "params": {
          "user": "用户地址"
        },
        "returns": {
          "_0": "该用户创建的所有盲拍合约地址数组"
        }
      },
      "notifyAuctionEnded(uint256,address)": {
        "params": {
          "nftTokenId": "NFT ID",
          "winner": "拍卖获胜者地址"
        }
      },
      "resellNFT(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "biddingTime": "竞标阶段持续时间",
          "minPrice": "最低出价",
          "nftTokenId": "NFT ID",
          "revealTime": "披露阶段持续时间",
          "startTime": "竞标开始时间"
        },
        "returns": {
          "auctionAddress": "新创建的拍卖合约地址"
        }
      }
    },
    "title": "盲拍工厂合约",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createAuction(uint256,uint256,uint256,string)": {
        "notice": "创建传统拍卖（不铸造NFT，向后兼容）"
      },
      "createNFTAuction(uint256,uint256,uint256,string,(string,string,string,uint256,string))": {
        "notice": "创建NFT拍卖（铸造新NFT并创建拍卖）"
      },
      "getAuctionCount()": {
        "notice": "获取所有创建的拍卖数量"
      },
      "getAuctions(uint256,uint256)": {
        "notice": "获取所有拍卖地址"
      },
      "getNFTAuction(uint256)": {
        "notice": "获取NFT对应的拍卖合约"
      },
      "getUserAuctions(address)": {
        "notice": "获取用户创建的所有拍卖"
      },
      "notifyAuctionEnded(uint256,address)": {
        "notice": "拍卖结束通知函数（由拍卖合约调用）"
      },
      "resellNFT(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "NFT二级市场：重新拍卖现有NFT"
      }
    },
    "notice": "用于创建和管理多个盲拍合约，支持NFT铸造和二级市场",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4136,
        "contract": "contracts/BlindAuctionFactory.sol:BlindAuctionFactory",
        "label": "nftContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AuctionNFT)3346"
      },
      {
        "astId": 4167,
        "contract": "contracts/BlindAuctionFactory.sol:BlindAuctionFactory",
        "label": "userAuctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4170,
        "contract": "contracts/BlindAuctionFactory.sol:BlindAuctionFactory",
        "label": "allAuctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4174,
        "contract": "contracts/BlindAuctionFactory.sol:BlindAuctionFactory",
        "label": "nftToAuction",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AuctionNFT)3346": {
        "encoding": "inplace",
        "label": "contract AuctionNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}